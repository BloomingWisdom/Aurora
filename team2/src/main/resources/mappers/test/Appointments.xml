<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.repository.AppointmentsMapper">

	<select id="getAppointList" parameterType="map" resultType="map">
		SELECT
		mh.HISTORY_ID AS HISTORY_ID,
		mh.ASSIGNMENT_TYPE AS
		ASSIGNMENT_TYPE,
		TO_CHAR(mh.CHANGE_DATE,
		'YYYY-MM-DD') AS CHANGE_DATE,
		mh.MEMBER_ID AS MEMBER_ID,
		m.NAME AS NAME,
		mh.OLD_GRADE AS OLD_GRADE,
		mh.NEW_GRADE AS NEW_GRADE,
		mh.OLD_DEPT AS
		OLD_DEPT,
		mh.NEW_DEPT AS
		NEW_DEPT,
		mh.ETC AS ETC,
		TO_CHAR(mh.CREATE_AT,
		'YYYY-MM-DD') AS CREATE_AT
		FROM MEMBER_HISTORY mh
		LEFT JOIN MEMBER m
		ON
		mh.member_id = m.member_id
		WHERE 1=1
		<if test="startDate != null and startDate != ''">
			AND mh.change_date <![CDATA[>=]]>
			#{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			AND mh.change_date <![CDATA[<=]]>
			#{endDate}
		</if>
		<if test="appointGubun != null and appointGubun != ''">
			AND mh.assignment_type = #{appointGubun}
		</if>
		ORDER BY mh.CREATE_AT DESC
	</select>

	<select id="getMinMaxDate" resultType="map">
		SELECT
		TO_CHAR(NVL(MIN(CHANGE_DATE), TO_DATE('2024-01-01', 'YYYY-MM-DD')),
		'YYYY-MM-DD') AS minDate,
		TO_CHAR(NVL(MAX(CHANGE_DATE), SYSDATE),
		'YYYY-MM-DD') AS maxDate
		FROM MEMBER_HISTORY
	</select>

	<!-- 부서 및 팀 조회 -->
	<select id="getAllDepartments" resultType="map">
		SELECT
		D1.DEPT_ID AS
		deptId,
		C1.CODE_NAME AS deptName,
		CASE
		WHEN D1.PARENT_DEPT_ID IS NULL
		THEN '부서'
		ELSE '팀'
		END AS deptType,
		C2.CODE_NAME AS parentDeptName
		FROM
		DEPARTMENT D1
		LEFT JOIN
		COMMON_CODE C1
		ON D1.DEPT_ID = C1.CODE_ID
		LEFT
		JOIN
		DEPARTMENT D2
		ON D1.PARENT_DEPT_ID =
		D2.DEPT_ID
		LEFT JOIN
		COMMON_CODE
		C2
		ON D2.DEPT_ID = C2.CODE_ID
		WHERE
		D1.USE_YN = 'Y'
		ORDER BY
		C2.CODE_NAME
		ASC,
		C1.CODE_NAME ASC
	</select>


	<!-- 모든 직급 조회 -->
	<select id="getAllRanks" resultType="map">
		SELECT
		CODE_ID AS codeId,
		CODE_NAME AS codeName
		FROM
		COMMON_CODE
		WHERE
		GROUP_ID = 'RANK'
		AND USE_YN =
		'Y'
		ORDER BY codeName ASC
	</select>

	<!-- 조직도 조회 -->
	<select id="getOrgTree" resultType="map">
		SELECT
		d1.DEPT_ID AS deptId,
		c1.CODE_NAME AS deptName,
		c2.CODE_NAME AS parentDeptName,
		e.MEMBER_ID AS memberId,
		e.NAME AS memberName,
		e.EMAIL AS email,
		e.PHONE AS phone,
		e.PROFILE_PIC AS profile,
		g.CODE_NAME AS gradeName,
		d1.PARENT_DEPT_ID AS parentDeptId,
		d1.DEPT_ID AS deptId
		FROM
		MEMBER e
		LEFT JOIN DEPARTMENT d1
		ON e.DEPT_ID = d1.DEPT_ID
		LEFT JOIN COMMON_CODE c1
		ON d1.DEPT_ID = c1.CODE_ID
		AND c1.GROUP_ID = 'DEP'
		LEFT JOIN DEPARTMENT d2
		ON d1.PARENT_DEPT_ID = d2.DEPT_ID
		LEFT JOIN COMMON_CODE c2
		ON d2.DEPT_ID = c2.CODE_ID
		AND c2.GROUP_ID = 'DEP'
		LEFT JOIN COMMON_CODE g
		ON e.GRADE_ID = g.CODE_ID
		AND g.GROUP_ID = 'RANK'
		WHERE
		e.USE_YN = 'Y'
		ORDER BY		
		CASE g.CODE_NAME
		WHEN '사장' THEN 1
		WHEN '부사장' THEN 2
		WHEN '전무' THEN 3
		WHEN '상무' THEN 4
		WHEN '이사' THEN 5
		WHEN '부장' THEN 6
		WHEN '차장' THEN 7
		WHEN '과장' THEN 8
		WHEN '대리' THEN 9
		WHEN '주임' THEN 10
		WHEN '사원' THEN 11
		ELSE 12
		END,
<!-- 		c2.CODE_NAME,
		c1.CODE_NAME, -->
		e.NAME
	</select>



	<!-- MEMBER_HISTORY에 변경 이력 삽입 -->
	<insert id="insertMemberHistory">
		INSERT INTO MEMBER_HISTORY (
		MEMBER_ID,
		ASSIGNMENT_TYPE, OLD_DEPT, NEW_DEPT, OLD_GRADE, NEW_GRADE,
		CHANGE_DATE, ETC
		) VALUES (
		#{MEMBER_ID}, #{ASSIGNMENT_TYPE},
		#{OLD_DEPT}, #{NEW_DEPT}, #{OLD_GRADE},
		#{NEW_GRADE}, #{CHANGE_DATE},
		#{ETC}
		)
	</insert>

	<!-- MEMBER 퇴사 처리 -->
	<update id="updateMemberForResign">
		UPDATE MEMBER
		SET USE_YN = 'N', RESIGN_DATE =
		#{CHANGE_DATE}
		WHERE MEMBER_ID = #{MEMBER_ID}
	</update>

	<!-- 일반 발령 처리 -->
	<update id="updateMember">
		UPDATE MEMBER
		SET DEPT_ID = #{NEW_DEPT},
		GRADE_ID =
		#{NEW_GRADE},
		UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE MEMBER_ID =
		#{MEMBER_ID}
	</update>

	<update id="updateChangedColumns">
		UPDATE MEMBER_HISTORY
		<set>
			<!-- 조건에 따라 컬럼 업데이트 -->
			<if test="ASSIGNMENT_TYPE != null">
				ASSIGNMENT_TYPE = #{ASSIGNMENT_TYPE},
			</if>
			<if test="CHANGE_DATE != null">
				CHANGE_DATE = #{CHANGE_DATE},
			</if>
			<if test="NEW_DEPT != null">
				NEW_DEPT = #{NEW_DEPT},
			</if>
			<if test="NEW_GRADE != null">
				NEW_GRADE = #{NEW_GRADE},
			</if>
			<if test="ETC != null">
				ETC = #{ETC},
			</if>
		</set>
		WHERE HISTORY_ID = #{HISTORY_ID}
	</update>

	<select id="getMemberDataByHistoryId" parameterType="string"
		resultType="map">
		SELECT
		MEMBER_ID,
		OLD_DEPT,
		OLD_GRADE,
		ASSIGNMENT_TYPE
		FROM
		MEMBER_HISTORY
		WHERE
		HISTORY_ID = #{historyId}
	</select>

	<update id="restoreMemberData">
		UPDATE MEMBER
		SET
		DEPT_ID = #{oldDept},
		GRADE_ID =
		#{oldGrade}
		WHERE MEMBER_ID = #{memberId}
	</update>

	<delete id="deleteHistoryById">
		DELETE FROM MEMBER_HISTORY
		WHERE HISTORY_ID =
		#{historyId}
	</delete>
</mapper>
