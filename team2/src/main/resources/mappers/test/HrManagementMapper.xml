<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.HrManagementMapper">
<!--    <select id="selectTest" resultType="string">-->
<!--        SELECT -->
<!--        	  TO_CHAR(SYSDATE, 'yyyy-mm-dd')-->
<!--  		  FROM -->
<!--  			  dual-->
<!--    </select>-->
	
 	<insert id="insertMember" useGeneratedKeys="true" keyProperty="ID"> 
		INSERT INTO MEMBER 
		<trim prefix="(" suffix=")" suffixOverrides=",">
	        <if test="NAME != null">NAME,</if>
	        <if test="RESIDENT_REGIST_NUM != null">RESIDENT_REGIST_NUM,</if>
	        <if test="ADDRESS_NUM != null">ADDRESS_NUM,</if>
	        <if test="ADDRESS1 != null">ADDRESS1,</if>
	        <if test="ADDRESS2 != null">ADDRESS2,</if>
	        <if test="EMAIL != null">EMAIL,</if>
	        <if test="PHONE != null">PHONE,</if>
	        <if test="JOIN_DATE != null">JOIN_DATE,</if>
	        <if test="CREATE_DATE != null">CREATE_DATE,</if>
	    </trim>
	    VALUES
	    <trim prefix="(" suffix=")" suffixOverrides=",">
	        <if test="NAME != null">#{NAME},</if>
	        <if test="RESIDENT_REGIST_NUM != null">#{RESIDENT_REGIST_NUM},</if>
	        <if test="ADDRESS_NUM != null">#{ADDRESS_NUM},</if>
	        <if test="ADDRESS1 != null">#{ADDRESS1},</if>
	        <if test="ADDRESS2 != null">#{ADDRESS2},</if>
	        <if test="EMAIL != null">#{EMAIL},</if>
	        <if test="PHONE != null">#{PHONE},</if>
	        <if test="JOIN_DATE != null">#{JOIN_DATE},</if>
	        <if test="CREATE_DATE != null">#{CREATE_DATE},</if>
	    </trim>
 	</insert> 
 	
 	<insert id="insertHistory">
 		
 	</insert>
 	
    <select id="selectMemberList" resultType="map">
		SELECT

				TO_CHAR(m.JOIN_DATE, 'YYYY-MM-DD') AS JOIN_DATE,
				m.ID,
				m.NAME,
				m.PHONE,
				m.EMAIL,
				
				(SELECT d.NAME 
			       FROM DEPARTMENT d 
				  WHERE d.ID = dh.DEPARTMENT_ID) AS DEPARTMENT,
				  
				(SELECT g.NAME 
				   FROM GRADE g 
				  WHERE g.ID = gh.GRADE_ID) AS GRADE
				  
		  FROM MEMBER m 
	 LEFT JOIN DEPARTMENT_HISTORY dh 
										ON m.ID = dh.MEMBER_ID
	 LEFT JOIN GRADE_HISTORY gh 
										ON m.ID = gh.MEMBER_ID
     WHERE m.USE_YN = 'Y'  	   
    </select>
    <!--
    <select id="selectOrganizationData" resultType="map">
	SELECT JSON_OBJECT(
        'bankCodes' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT('code' VALUE CODE, 'bankName' VALUE BANK_NAME)
            )
            FROM BANK_CODES
        ),
        'departments' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'id' VALUE ID,
                    'name' VALUE NAME,
                    'subDepartments' VALUE (
                        SELECT JSON_ARRAYAGG(
                            JSON_OBJECT(
                                'id' VALUE ID,
                                'name' VALUE NAME,
                                'subDepartments' VALUE NULL
                            )
                        )
                        FROM DEPARTMENT CHILD
                        WHERE CHILD.PARENT_DEPARTMENT_ID = PARENT.ID
                    )
                )
            )
            FROM DEPARTMENT PARENT
            WHERE PARENT.PARENT_DEPARTMENT_ID IS NULL
        ),
        'grades' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT('id' VALUE ID, 'name' VALUE NAME)
            )
            FROM GRADE
        )
    ) AS ORGANIZATION_DATA
    FROM DUAL;
    </select>
    -->
    <select id="selectOrganizationData" resultType="map">
    	SELECT 
				c.GROUP_ID AS GROUP_ID		
				, d.DEPT_ID	AS ID		
				, d.PARENT_DEPT_ID	AS PARENT
				, c.CODE_NAME	AS NAME
		  FROM 
				DEPARTMENT d
		  JOIN 
				COMMON_CODE c
			ON 
				d.DEPT_ID = c.CODE_ID
		 WHERE 
				c.USE_YN = 'Y' AND d.PARENT_DEPT_ID IS NOT NULL
		UNION ALL
		SELECT 
				GROUP_ID 
				, CODE_ID
				, 'none'
				, CODE_NAME
		  FROM
	  			 COMMON_CODE CC 
		WHERE
				GROUP_ID = 'RANK' AND USE_YN = 'Y'
		UNION ALL
		SELECT
				'BANK'
				, TO_CHAR(CODE)
				, 'none'
				, BANK_NAME
		FROM
				BANK_CODES
    </select>
</mapper>
