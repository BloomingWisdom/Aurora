<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.SalaryMapper">

	<select id="selectSalaryMember" resultType="map">
	<!-- selectSalaryMember - 급여입력에서 쓰이는 사원 조회 -->
		 SELECT
		 	MEMBER_ID
		  , NAME
          , (SELECT CODE_NAME
            	FROM COMMON_CODE CC
            	WHERE GRADE_ID = CC.CODE_ID) AS GRADE_NAME
          , (SELECT CODE_NAME
        		FROM COMMON_CODE CC
        		WHERE DEPT_ID = CC.CODE_ID) AS DEPT_NAME
		  , SALARY
		 FROM
		 	MEMBER
	</select>

    <select id="selectSalaryList" resultType="map">
    <!-- selectSalaryList - 급여기록 조회 (급여 등록 현황) -->
    <!-- getSalaryListMinMaxDate에서 조회된 최대최소일 범위의 급여기록 조회 -->
        SELECT
            S.PAYDAY,
            M.MEMBER_ID,
            M.NAME,
            M.GRADE_ID,
            (SELECT CODE_NAME
            	FROM COMMON_CODE CC
            	WHERE M.GRADE_ID = CC.CODE_ID) AS GRADE_NAME,
            M.DEPT_ID,
            (SELECT CODE_NAME
        		FROM COMMON_CODE CC
        		WHERE M.DEPT_ID = CC.CODE_ID) AS DEPT_NAME,
            M.SALARY,
            S.POSITION_BONUS,
            S.HOLIDAY_BONUS,
            S.NIGHT_BONUS,
            S.YEAREND_BONUS,
            S.FULLSERVICE_BONUS,
            S.PERFORMANCE_BONUS,
			S.TOTAL,
            S.SALARY_YN            
        FROM MEMBER M
        LEFT JOIN SALARY S
          ON M.MEMBER_ID = S.MEMBER_ID
		WHERE
			1 = 1
			<if test='id != "admin"'>
			   AND
				  S.MEMBER_ID = #{id}
		  	</if>
			<if test='startDate != null and startDate != "" 
						and endDate != null and endDate != ""'>
				AND 
					PAYDAY BETWEEN #{startDate} 
					AND #{endDate} 
			</if>
		ORDER BY
			S.PAYDAY DESC
    </select>
    
    <select id="selectSalaryTransferList" resultType="map">
    <!-- selectSalaryTransferList - 급여기록 조회 (급여 이체 현황) -->
    <!-- getSalaryListMinMaxDate에서 조회된 최대최소일 범위의 급여기록 조회 -->
        SELECT
            S.PAYDAY,
            M.MEMBER_ID,
            M.NAME,
            M.EMAIL,
            M.BANK_CODE,
            BS.BANK_NAME,
            M.ACCOUNT,
            M.ACCOUNT_HOLDER,
            S.TOTAL,
            S.SALARY_YN            
        FROM MEMBER M
        JOIN SALARY S
          ON M.MEMBER_ID = S.MEMBER_ID
        JOIN BANK_CODES BS
          ON M.BANK_CODE = BS.CODE
		WHERE
			1 = 1
			<if test='id != "admin"'>
			   AND
				  S.MEMBER_ID = #{id}
		  	</if>
			<if test='startDate != null and startDate != "" 
						and endDate != null and endDate != ""'>
				AND 
					PAYDAY BETWEEN #{startDate} 
					AND #{endDate} 
			</if>
		ORDER BY
			S.PAYDAY DESC
    </select>
    
    <select id="getSalaryListMinMaxDate" resultType="map">
     <!-- getSalaryInputMinMaxDate - 급여조회에서 최대최소일 조회 -->
        SELECT 
		      MAX(PAYDAY)	AS SALARY_MAX_DATE
    		, MIN(PAYDAY) 	AS SALARY_MIN_DATE
		FROM
		      SALARY
	    WHERE
			  1 = 1
		  <if test='id != "admin"'>
			  AND
				 member_id = #{id}
		  </if>
    </select>
    
    <select id="selectSalaryWriteById" resultType="map">
    <!-- 사원ID에 해당하는 기본 급여정보를 조회 (급여 중 기본급만 조회) -->
    <!-- 급여입력 모달창 -->
    	SELECT
            MEMBER_ID,
            NAME,
            GRADE_ID,
            DEPT_ID,
            SALARY
		FROM 
			MEMBER
		WHERE
			1 = 1
			AND
				MEMBER_ID = #{id}
	</select>
    
    <select id="selectSalaryListById" resultType="map">
    <!-- 사원ID와 귀속연월에 해당하는 급여정보를 조회 (전체 급여 조회) -->
    <!-- 만약 귀속연월이 없으면 사원ID에 해당하는 급여정보를 조회 -->
		SELECT
            M.MEMBER_ID,
            M.NAME,
            M.GRADE_ID,
            M.DEPT_ID,
            M.SALARY,
            S.PAYDAY,
            S.POSITION_BONUS,
            S.HOLIDAY_BONUS,
            S.NIGHT_BONUS,
            S.YEAREND_BONUS, 
            S.FULLSERVICE_BONUS,
            S.PERFORMANCE_BONUS,
            S.TOTAL
		FROM 
			MEMBER M
		LEFT JOIN SALARY S
          	   ON M.MEMBER_ID = S.MEMBER_ID
		WHERE
			1 = 1
			AND
				M.MEMBER_ID = #{id}
			<if test='payday != null'>
				AND 
					S.PAYDAY = #{payday}
			</if>
		ORDER BY
			S.PAYDAY DESC
    </select>
    
    <!-- 사원별 급여 입력(관리자) -->
	<insert id="insertSalary" parameterType="map">	    
		INSERT INTO SALARY (
			MEMBER_ID,
			GRADE_ID,
			PAYDAY,
			POSITION_BONUS,
			HOLIDAY_BONUS,
			NIGHT_BONUS,
			YEAREND_BONUS,
			FULLSERVICE_BONUS,
			PERFORMANCE_BONUS,
			TOTAL
			)
	        SELECT 
	            m.member_id,
	            m.grade_id,
	            #{PAYDAY},  
	            NVL(#{POSITION_BONUS}, 0), 
	            NVL(#{HOLIDAY_BONUS}, 0),    
		    	NVL(#{NIGHT_BONUS}, 0),
	            NVL(#{YEAREND_BONUS}, 0),
	            NVL(#{FULLSERVICE_BONUS}, 0),
	            NVL(#{PERFORMANCE_BONUS}, 0),
	            (
		            NVL(#{POSITION_BONUS}, 0)
		          + NVL(#{HOLIDAY_BONUS}, 0)
		          + NVL(#{NIGHT_BONUS}, 0)
		          + NVL(#{YEAREND_BONUS}, 0)
		          + NVL(#{FULLSERVICE_BONUS}, 0)
		          + NVL(#{PERFORMANCE_BONUS}, 0)
		        ) AS TOTAL
	        FROM 
	        	member m
	        WHERE 
	        	m.member_id = #{MEMBER_ID}
<!--         AND NOT EXISTS ( -->
<!--             SELECT 1 -->
<!--             FROM salary s -->
<!--             WHERE s.member_id = m.member_id -->
<!--         ) -->	    
	</insert>
 	
 	<!-- 급여 수정 - 사원의 기본급 수정 -->
	<update id="updateMemberSalary" parameterType="map">
	    UPDATE MEMBER
	       SET 
	           SALARY = #{salary}
	     WHERE MEMBER_ID = #{memberId}
	       AND EXISTS (
	           SELECT 1
	             FROM SALARY S
	            WHERE S.MEMBER_ID = MEMBER.MEMBER_ID
			            <if test="payday != null and payday != ''">
			            	AND S.PAYDAY = #{payday}
			            </if>
	       )
	</update>
	
	<!-- 급여 수정 - 사원의 상여금(보너스) 수정 -->
	<update id="updateSalaryBonus" parameterType="map">
		UPDATE SALARY 
	   	   SET 
	   	   	   PAYDAY = #{payday}
	   	   	 , POSITION_BONUS = NVL(#{positionBonus}, 0) 
	       	 , HOLIDAY_BONUS = NVL(#{holidayBonus}, 0) 
	       	 , NIGHT_BONUS = NVL(#{nightBonus}, 0) 
	       	 , YEAREND_BONUS = NVL(#{yearendBonus}, 0) 
	       	 , FULLSERVICE_BONUS = NVL(#{fullserviceBonus}, 0) 
	       	 , PERFORMANCE_BONUS = NVL(#{performanceBonus}, 0)
	       	 , TOTAL = (NVL((SELECT SALARY 
	       	 			 FROM MEMBER 
	       	 			 WHERE MEMBER_ID = #{memberId}
	       	 			 		<if test="payday != null and payday != ''">
	       	 			 	   		AND PAYDAY = #{payday}
	       	 			 	   	</if> 
						 ), 0) 
			       	 + NVL(#{positionBonus}, 0) 
			       	 + NVL(#{holidayBonus}, 0) 
			       	 + NVL(#{nightBonus}, 0) 
		             + NVL(#{yearendBonus}, 0) 
		             + NVL(#{fullserviceBonus}, 0) 
		             + NVL(#{performanceBonus}, 0)
		             )
	       	 , UPDATE_DATE = SYSDATE
		WHERE 
			 MEMBER_ID = #{memberId}
			 <if test="payday != null and payday != ''">
	         	AND PAYDAY = #{payday}
	         </if>
	</update>
	
	<!-- 급여 삭제 -->
	<delete id="deleteSalary">
		DELETE FROM salary
        WHERE MEMBER_ID = #{memberId}
          AND PAYDAY = #{payday}
	</delete>    
    
    <select id="selectNightBonusById" resultType="map">
    <!-- 야간 근무 시간 계산 -->
	<!-- 사원 달별 출퇴근 및 연장,야간 근무 시간 조회 및 연장,야간근무수당 계산 -->
		WITH DAILY_COMMUTE AS (
		    SELECT
		        C.MEMBER_ID,
		        TO_CHAR(TO_DATE(C.CHECK_IN_DATE, 'YYYY-MM-DD'), 'YYYY-MM') AS COMMUTE_MONTH, <!-- 출근 월 -->
		        C.CHECK_IN_DATE, <!-- 출근 날짜 -->
		        CASE
		            WHEN C.CHECK_OUT_TIME IS NOT NULL THEN
		                (TO_DATE(C.CHECK_OUT_TIME, 'HH24:MI:SS') - TO_DATE(C.CHECK_IN_TIME, 'HH24:MI:SS')) * 24
		            ELSE
		                0
		        END AS DAILY_WORK_HOURS, <!-- 일별 근무 시간 -->
		        <!-- 연장근무 시간 계산 -->
		        CASE
		            WHEN TO_DATE(C.CHECK_OUT_TIME, 'HH24:MI:SS') > TO_DATE('18:00:00', 'HH24:MI:SS') THEN
		                (LEAST(TO_DATE(C.CHECK_OUT_TIME, 'HH24:MI:SS'), TO_DATE('06:00:00', 'HH24:MI:SS') + 1) 
		                - GREATEST(TO_DATE(C.CHECK_IN_TIME, 'HH24:MI:SS'), TO_DATE('18:00:00', 'HH24:MI:SS'))) * 24
		            ELSE
		                0
		        END AS OVERTIME_HOURS <!-- 연장근무 시간 -->
		    FROM
		        COMMUTE C
		),
		MONTHLY_COMMUTE AS (
		    SELECT
		        DC.MEMBER_ID,
		        DC.COMMUTE_MONTH,
		        COUNT(DISTINCT DC.CHECK_IN_DATE) AS WORK_DAYS, <!-- 월별 고유 날짜 수 -->
		        SUM(DC.DAILY_WORK_HOURS) AS TOTAL_WORK_HOURS, <!-- 월별 총 근무 시간 -->
		        SUM(DC.OVERTIME_HOURS) AS TOTAL_OVERTIME_HOURS <!-- 월별 총 연장근무 시간 -->
		    FROM
		        DAILY_COMMUTE DC
		    GROUP BY
		        DC.MEMBER_ID,
		        DC.COMMUTE_MONTH
		),
		CALCULATED_BONUS AS (
		    SELECT
		        MC.MEMBER_ID,
		        MC.COMMUTE_MONTH,
		        MC.TOTAL_OVERTIME_HOURS,
		        M.SALARY,
		        <!-- 연장근무 수당 계산 (10단위 올림 적용) -->
		        CEIL((M.SALARY / 209) * 1.5 * NVL(MC.TOTAL_OVERTIME_HOURS, 0) / 10) * 10 AS OVERTIME_BONUS,
		        <!-- 연장근무 수당 원본 값 -->
		        (M.SALARY / 209) * 1.5 * NVL(MC.TOTAL_OVERTIME_HOURS, 0) AS OVERTIME_BONUS_ORIGIN
		    FROM
		        MONTHLY_COMMUTE MC
		        JOIN MEMBER M ON MC.MEMBER_ID = M.MEMBER_ID
		)
		SELECT
		    CB.MEMBER_ID,
		    CB.COMMUTE_MONTH,
		    CB.TOTAL_OVERTIME_HOURS,
		    CB.OVERTIME_BONUS,
		    CB.OVERTIME_BONUS_ORIGIN
		FROM
		    CALCULATED_BONUS CB
		WHERE
			CB.MEMBER_ID = #{id}
			<if test="payday != null and payday != ''">
	         	AND CB.COMMUTE_MONTH = #{payday}
	        </if>
		ORDER BY
		    CB.MEMBER_ID,
		    CB.COMMUTE_MONTH
	</select>
	
	<!-- 급여 확정 버튼 비활성화 -->
	<update id="updatefixedSalary" parameterType="map">
		UPDATE SALARY
		SET SALARY_YN = 'Y'
		, UPDATE_DATE = SYSDATE
        WHERE MEMBER_ID = #{memberId}
        	AND PAYDAY = #{payday}
        	AND SALARY_YN = 'N'
	</update>

</mapper>