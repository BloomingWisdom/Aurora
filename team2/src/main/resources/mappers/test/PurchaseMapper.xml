<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.PurchaseMapper">
	
<!--	발주 리스트-->
	<select id="getPurchaseList" resultType="map">	
	SELECT 
        PO.PO_ID,
    PO.PO_NUM,
    (SELECT NVL(SUM(PD.PO_COUNT), 0)
     FROM PO_DETAIL PD 
     WHERE PD.PO_ID = PO.PO_ID) AS PO_COUNT,
    (SELECT TO_CHAR(NVL(SUM(PD.TOTAL_PRICE), 0), 'FM9,999,999') || '원'
     FROM PO_DETAIL PD 
     WHERE PD.PO_ID = PO.PO_ID) AS PO_PRICE,
    TO_CHAR(PO.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE,
    (SELECT NAME 
     FROM MEMBER M1 
     WHERE M1.MEMBER_ID = PO.MEMBER_ID) AS MEMBER_NAME,
    PO.CLIENT_ID,
    (SELECT CLIENT_NAME 
     FROM CLIENT 
     WHERE CLIENT_ID = PO.CLIENT_ID) AS CLIENT_NAME,
    PO.PO_STATUS,
    TO_CHAR(PO.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE,
    (SELECT NAME 
     FROM MEMBER M2 
     WHERE M2.MEMBER_ID = PO.UPDATE_MEMBER) AS UPDATE_MEMBER
FROM PURCHASE_ORDER PO
ORDER BY CREATE_DATE DESC
	</select>
	
<!--	발주 등록-->
	<insert id="insertPurchase" parameterType="map">
	INSERT INTO PURCHASE_ORDER (
    PO_ID,
    CREATE_DATE,
    MEMBER_ID,
    CLIENT_ID,
    PO_STATUS,
    PO_NUM
)
SELECT
    'PO-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' || LPAD(PO_SEQ.NEXTVAL, 4, '0'),
    CURRENT_DATE, 
    #{INSERT_MEM},
    CLIENT_ID,
    #{PO_STATUS},
    'ORD-' || TO_CHAR(SYSDATE, 'MMDD-HH24MISS')
FROM CLIENT
WHERE CLIENT_ID = #{cltId}
	</insert>
	
<!--	발주 수정-->
	<update id="updatePurchase" parameterType="map">
    UPDATE PURCHASE_ORDER
    	SET 
       	 	CREATE_DATE = CURRENT_DATE,
       	 	CLIENT_ID = #{CLIENT_ID, jdbcType=VARCHAR},
       	 	UPDATE_DATE = CURRENT_DATE,
       	 	UPDATE_MEMBER = #{UPDATE_MEM},
       	 	PO_NUM = #{PO_NUM, jdbcType=VARCHAR}
    WHERE PO_ID = #{PO_ID, jdbcType=VARCHAR}  <!-- PO_ID를 기준으로 업데이트 -->
	</update>
	
	<!-- DELETE (데이터 삭제) -->
    <delete id="deletePurchase">
        DELETE FROM PURCHASE_ORDER 
        	WHERE PO_ID = #{PO_ID}
    </delete>
    
    <select id="getPurchaseDetail" resultType="map" parameterType="map">
    SELECT
    ROW_NUMBER() OVER (ORDER BY TO_NUMBER(pd.PODETAIL_ID)) AS SEQ,  -- 숫자 변환 후 정렬
    pd.PODETAIL_ID,
    pd.MATERIAL_ID,
    TO_CHAR(pd.TOTAL_PRICE, 'FM9,999,999') || '원' AS TOTAL_PRICE,
    pd.PO_COUNT,
    pd.TOTAL_PRICE,
    pd.UPDATE_DATE,
    pd.UPDATE_MEMBER,
    m.MATERIAL_NAME,
    TO_CHAR(m.MATERIAL_PRICE, 'FM9,999,999') || '원' AS MATERIAL_PRICE,
    pd.PO_STATUS
FROM PO_DETAIL pd
JOIN PURCHASE_ORDER p 
    ON pd.PO_ID = p.PO_ID
JOIN MATERIAL m
    ON pd.MATERIAL_ID = m.MATERIAL_ID
WHERE pd.PO_ID = #{PO_ID}
ORDER BY TO_NUMBER(pd.PODETAIL_ID)
 </select>

<!-- 발주 상세 등록    -->
    <insert id="insertDetail" parameterType="map">
    INSERT INTO PO_DETAIL (
        PODETAIL_ID,
        PO_ID,
        MATERIAL_ID,
        PO_COUNT,
        PO_PRICE,
        TOTAL_PRICE,
        CREATE_DATE
    )
    SELECT 
        SEQ_PODETAIL.NEXTVAL,
        po.PO_ID,
        #{MATERIAL_ID},
        #{PO_COUNT},
        m.MATERIAL_PRICE, 
        (#{PO_COUNT} * m.MATERIAL_PRICE),
        CURRENT_DATE
    FROM PURCHASE_ORDER po
    JOIN MATERIAL m ON m.MATERIAL_ID = #{MATERIAL_ID}
    WHERE po.PO_ID = #{poId}
</insert>

<!-- 발주 상세 수정 -->
<update id="updateDetail" parameterType="map">
    UPDATE PO_DETAIL
    	SET 
       	 	MATERIAL_ID = #{MATERIAL_ID, jdbcType=VARCHAR},
       	 	PO_COUNT = #{PO_COUNT},
       	 	TOTAL_PRICE   = #{PO_COUNT} * PO_PRICE,
       	 	UPDATE_DATE = CURRENT_DATE,
       	 	UPDATE_MEMBER = #{UPDATE_MEM},
       	 	PO_STATUS = #{PO_STATUS}
    WHERE PODETAIL_ID = #{PODETAIL_ID, jdbcType=VARCHAR}  <!-- PO_ID를 기준으로 업데이트 -->
	</update>


<update id="updatePurchaseStatus" parameterType="map">
    <![CDATA[
  UPDATE PURCHASE_ORDER
  SET PO_STATUS = (
    SELECT 
      CASE 
        WHEN MIN(PD.PO_STATUS) = '미결' AND MAX(PD.PO_STATUS) = '미결' THEN '미결'
        WHEN MIN(PD.PO_STATUS) = '마감' AND MAX(PD.PO_STATUS) = '마감' THEN '마감'
        ELSE '진행중'
      END
    FROM PO_DETAIL PD
    WHERE PD.PO_ID = PURCHASE_ORDER.PO_ID
  )
  WHERE PO_ID = #{PO_ID, jdbcType=VARCHAR}
    AND PO_STATUS <> (
      SELECT 
        CASE 
          WHEN MIN(PD.PO_STATUS) = '미결' AND MAX(PD.PO_STATUS) = '미결' THEN '미결'
          WHEN MIN(PD.PO_STATUS) = '마감' AND MAX(PD.PO_STATUS) = '마감' THEN '마감'
          ELSE '진행중'
        END
      FROM PO_DETAIL PD
      WHERE PD.PO_ID = PURCHASE_ORDER.PO_ID
    )
]]>
</update>




<!-- DELETE (데이터 삭제) -->
    <delete id="deleteDetail" parameterType="map">
        DELETE FROM PO_DETAIL 
        	WHERE PODETAIL_ID = #{PODETAIL_ID}
    </delete>
        
<!-- 거래처 목록 -->
    <select id="getClientList" resultType="map" parameterType="map">
    	SELECT CLIENT_ID, CLIENT_NAME
    	FROM CLIENT
    	 WHERE 
		 	   1 = 1
		<if test='client_id != null and client_id != ""'>
		   AND CLIENT_ID = #{client_id}
		</if>
		<if test='client_name != null and client_name != ""'>
		   AND CLIENT_NAME = #{client_name}
		</if>
    </select>


<!-- 모달창 재료 목록 -->
	<select id="getMaterialList" resultType="map" parameterType="map">
    	SELECT MATERIAL_ID, MATERIAL_NAME, MATERIAL_PRICE
    	FROM MATERIAL
    	WHERE 
		 	   1 = 1
		<if test='material_id != null and material_id != ""'>
		   AND MATERIAL_ID = #{material_id}
		</if>
		<if test='material_name != null and material_name != ""'>
		   AND MATERIAL_NAME LIKE '%' || #{material_name} || '%'
		</if>
    </select>


</mapper>

