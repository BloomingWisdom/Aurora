<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.DeptMapper">

	<select id="getUpperDept" resultType="map">
    SELECT 
        d.DEPT_ID,
        d.MEMBER_ID,
        cc.CODE_NAME AS DEPT_NAME,
        m.NAME AS MEMBER_NAME
    FROM  DEPARTMENT d
    LEFT JOIN COMMON_CODE cc
        ON d.DEPT_ID = cc.CODE_ID
    LEFT JOIN MEMBER m
        ON d.MEMBER_ID = m.MEMBER_ID
        <where>
        <if test="DEPT_ID != null and DEPT_ID != ''">
    AND d.DEPT_ID = #{DEPT_ID}
</if>
    AND d.PARENT_DEPT_ID IS NULL
        </where>
	</select>
	
	<select id="isDuplicateUpperDept" resultType="Integer">
	<!-- isDuplicateUpperDept 상위부서 insert전 중복 확인 -->
		SELECT COUNT(*)	AS COUNT
		  FROM DEPARTMENT
		 WHERE DEPT_ID = #{DEPT_ID}
	</select>
	
	<insert id="insertUpperDept">
	<!-- insertUpperDept 상위부서 등록 -->
		INSERT INTO DEPARTMENT (
			  DEPT_ID 
			, MEMBER_ID
			, CREATE_DATE
			, USE_YN 
		) VALUES (
			  #{DEPT_ID}
			, #{MEMBER_ID}
			, CURRENT_DATE
			, #{USE_YN}
		)
	</insert>

	<select id="getCcodeList" resultType="map">
	SELECT CC.CODE_ID AS codeId, CC.CODE_NAME AS codeName
FROM COMMON_CODE CC
LEFT JOIN DEPARTMENT D ON CC.CODE_ID = D.DEPT_ID
WHERE CC.GROUP_ID LIKE 'DEP%' 
  AND D.DEPT_ID IS NULL
	</select>
	
	<select id="getDepMngList" resultType="map">
	SELECT M.MEMBER_ID AS memberId, M.NAME AS name 
		FROM MEMBER M
		LEFT JOIN 
	DEPARTMENT D ON M.MEMBER_ID = D.MEMBER_ID
		WHERE D.MEMBER_ID IS NULL
	</select>
	
	<select id="isExistUpperDeptChild" resultType="Integer">
	<!-- isExistUpperDeptChild 상위부서 삭제전 하위 부서 존재 확인 -->
		SELECT COUNT(*) 
		  FROM DEPARTMENT
		 WHERE PARENT_DEPT_ID = #{DEPT_ID}
	</select>
	
	<delete id="deleteUpperDept">
	<!-- "deleteUpperDept" 상위부서 삭제 -->
		DELETE FROM DEPARTMENT
 		 WHERE DEPT_ID = #{DEPT_ID}
	</delete>
	
	<update id="updateUpperDept">
	<!-- updateUpperDept 상위부서 수정 -->
		UPDATE DEPARTMENT 
		   SET 
			   MEMBER_ID = #{MEMBER_ID},
			   USE_YN = #{USE_YN},
			   UPDATE_DATE = CURRENT_DATE
		 WHERE DEPT_ID = #{DEPT_ID}
	</update>
			
	<update id="updateInUpperAdmin">
	UPDATE MEMBER
	SET AUTHORITY = 'ADMIN'
	WHERE MEMBER_ID = #{MEMBER_ID}
	</update>
	
	<update id="updateUpperUser">
    UPDATE MEMBER
    SET AUTHORITY = 'USER'
    WHERE MEMBER_ID IN (
        SELECT MEMBER_ID
        FROM DEPARTMENT
        WHERE DEPT_ID = #{DEPT_ID}
    )
	</update>
	
	<update id="updateUpperAdmin">
    UPDATE MEMBER
    SET AUTHORITY = 'ADMIN'
    WHERE MEMBER_ID = #{MEMBER_ID}
	</update>
	
	<select id="getLowerDept" resultType="map">
	<!-- getLowerDept 하위부서 조회 -->
		SELECT 
			   d.DEPT_ID 
			 , d.MEMBER_ID
			 , d.PARENT_DEPT_ID 
			 , cc.CODE_NAME AS DEPT_NAME
			 , d.USE_YN
			 , m.NAME AS MEMBER_NAME 
		  FROM DEPARTMENT d
		  LEFT JOIN COMMON_CODE CC
		  	ON d.DEPT_ID = cc.CODE_ID
		  	LEFT JOIN MEMBER m
       		 ON d.MEMBER_ID = m.MEMBER_ID
		 WHERE 
		 	   1 = 1
			<if test='DEPT_ID != null and DEPT_ID != ""'>
		   		AND d.PARENT_DEPT_ID = #{DEPT_ID}
		   	</if>
		   	<if test='UPPER_ID != null and UPPER_ID != ""'>
		   		AND d.DEPT_ID = #{UPPER_ID}
		   	</if>
	</select>
	
	<select id="isDuplicateLowerDept" resultType="Integer">
	<!-- isDuplicateLowerDept 하위부서 insert전 중복 확인 -->
		SELECT COUNT(*)	AS COUNT
		  FROM DEPARTMENT
		 WHERE DEPT_ID = #{DEPT_ID}
	</select>
	
	<insert id="insertLowerDept">
	<!-- insertLowerDept 하위부서 등록 -->
		INSERT INTO DEPARTMENT (
			  DEPT_ID
			, PARENT_DEPT_ID
			, MEMBER_ID
			, CREATE_DATE
			, USE_YN 
		) VALUES (
			  #{DEPT_ID}
			, #{PARENT_DEPT_ID}
			, #{MEMBER_ID}
			, CURRENT_DATE
			, #{USE_YN}
		)
	</insert>
	
	<update id="updateInLowerAdmin">
	UPDATE MEMBER
	SET AUTHORITY = 'ADMIN'
	WHERE MEMBER_ID = #{MEMBER_ID}
	</update>
	
	<update id="updateLowerUser">
    UPDATE MEMBER
    SET AUTHORITY = 'USER'
    WHERE MEMBER_ID IN (
        SELECT MEMBER_ID
        FROM DEPARTMENT
        WHERE DEPT_ID = #{DEPT_ID}
    )
	</update>
	
	<update id="updateLowerAdmin">
    UPDATE MEMBER
    SET AUTHORITY = 'ADMIN'
    WHERE MEMBER_ID = #{MEMBER_ID}
	</update>
		
	<delete id="deleteLowerDept">
	<!-- deleteLowerDept 하위부서 삭제 -->
		DELETE FROM DEPARTMENT
    WHERE DEPT_ID = #{DEPT_ID}
    AND PARENT_DEPT_ID IS NOT NULL
	</delete>
	
	<update id="updateLowerDept">
	<!-- "updateLowerDept" 하위부서 수정 -->
		UPDATE DEPARTMENT 
		   SET 
			   MEMBER_ID = #{MEMBER_ID}
			 , USE_YN = #{USE_YN}
			 , UPDATE_DATE = CURRENT_DATE
		 WHERE DEPT_ID = #{DEPT_ID}
	</update>
	
	<select id="getDepartmentList" resultType="map">
    SELECT 
        d.DEPT_ID, 
        NVL(d.PARENT_DEPT_ID, ' ') AS PARENT_DEPT_ID, 
        d.MEMBER_ID,
        d.USE_YN, 
        m.name AS dept_name      
    FROM DEPARTMENT d 
LEFT JOIN MEMBER m
ON d.MEMBER_ID = m.MEMBER_ID
	</select>
</mapper>