<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.AttendanceMapper">
    <select id="getMyCommuteHistory" resultType="map">
    <!-- getMyCommuteHistory 출퇴근기록 조회 -->
		SELECT 
              CHECK_IN_DATE				AS COMMUTE_CHECK_IN_DATE
    		, CHECK_IN_TIME				AS COMMUTE_CHECK_IN_TIME
    		, CHECK_OUT_DATE			AS COMMUTE_CHECK_OUT_DATE
    		, CHECK_OUT_TIME			AS COMMUTE_CHECK_OUT_TIME
    		, MEMBER_ID					AS COMMUTE_MEMBER_ID
		  FROM
		      COMMUTE
		 WHERE
		 	  1 = 1
			  <if test='id != "admin"'>
		   	 	AND member_id = #{id}
			  </if>
			  <choose>
			 	 <when test='isToday != null and isToday != ""'>
					AND TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') = CHECK_IN_DATE    
			   	 </when>
			 	 <when test='startDate != null and startDate != ""
	   			 		and endDate != null and endDate != ""'>
			  	  	AND CHECK_IN_DATE BETWEEN #{startDate} 
										  AND #{endDate}   
			  	 </when>    
			  </choose>
		 ORDER BY
		 	  CHECK_IN_TIME DESC
    </select>
    
    <select id="getMyCommuteHistoryMinMaxDate" resultType="map">
    <!-- getMyCommuteHistoryMinMaxDate 출퇴근기록에서 최대최소일 조회 -->
        SELECT 
		      MAX(CHECK_IN_DATE)	AS COMMUTE_MAX_DATE
    		, MIN(CHECK_IN_DATE) 	AS COMMUTE_MIN_DATE
		  FROM
		      COMMUTE
	     WHERE
			  1 = 1
		  <if test='id != "admin"'>
			   AND
				  member_id = #{id}
		  </if>
    </select>
    
    <select id="getMyAttendanceHistory" resultType="map">
    <!-- getMyAttendanceHistory 지각/조퇴/결근 기록 조회 -->
		SELECT 
			  	TO_CHAR(CREATE_DATE, 'YYYY-MM-DD')	AS CREATE_DATE
			  , b.CT_CHECK_IN_TIME
			  , b.CHECK_IN_TIME
			  , b.CT_CHECK_OUT_TIME
			  , b.CHECK_OUT_TIME
			  , b.ATTENDANCE_TEXT
		  FROM (
			  SELECT 
					a.*
				  , ROW_NUMBER() OVER(PARTITION BY COMMUTE_ID ORDER BY CT_STARTING_DATE DESC)	AS ROW_NUM
			   FROM (
				   SELECT
				         c.COMMUTE_ID															AS COMMUTE_ID
				       , c.MEMBER_ID 															AS MEMBER_ID
				       , c.CHECK_IN_TIME														AS CHECK_IN_TIME 	
				       , NVL(c.CHECK_OUT_TIME, '-')												AS CHECK_OUT_TIME
					   , CASE 
					  	     WHEN c.CHECK_IN_TIME > ct.CHECK_IN_TIME 				THEN '지각' 
					         WHEN c.CHECK_OUT_TIME <![CDATA[<]]> ct.CHECK_OUT_TIME 	THEN '조퇴' 
					         ELSE '정상출근'
					     END																	AS ATTENDANCE_TEXT
					       , c.CREATE_DATE 														AS CREATE_DATE
					       , ct.STARTING_DATE 													AS CT_STARTING_DATE
					       , ct.CHECK_IN_TIME 													AS CT_CHECK_IN_TIME
						   , ct.CHECK_OUT_TIME 													AS CT_CHECK_OUT_TIME
				     FROM
				         COMMUTE											c
				         INNER JOIN COMMUTE_TIME 							ct 
				      		     ON c.CHECK_IN_DATE >= ct.STARTING_DATE
				    WHERE
				         1 = 1
				      AND
				         c.member_id = #{id}
				    ORDER BY 
				         c.CHECK_IN_DATE DESC
			) a
			ORDER BY
			 	 CREATE_DATE DESC
		) b
		 WHERE
		 	  1 = 1
		   AND
		 	  ROW_NUM = 1
	 	  <if test='startDate != null and startDate != ""
			 		and endDate != null and endDate != ""'>
			  AND 
				 TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') BETWEEN #{startDate} 
								 						AND #{endDate} 
		  </if>
    </select>
    
    <select id="getMyAttendanceHistoryDonutChart" resultType="map">
    <!-- getMyAttendanceHistoryDonutChart 지각/조퇴/결근 기록 조회 -->
		SELECT
		  	  c.ATTENDANCE_TEXT
		    , COUNT(c.ATTENDANCE_TEXT)	AS PIE_CHART_VALUE
		  FROM (
			    SELECT 
					  b.*
				  FROM (
					  SELECT 
							a.*
						  , ROW_NUMBER() OVER(PARTITION BY COMMUTE_ID ORDER BY CT_STARTING_DATE DESC)	AS ROW_NUM
					   FROM (
						   SELECT
						         c.COMMUTE_ID															AS COMMUTE_ID
						       , c.MEMBER_ID 															AS MEMBER_ID
						       , c.CHECK_IN_TIME														AS CHECK_IN_TIME 	
						       , NVL(c.CHECK_OUT_TIME, '-')												AS CHECK_OUT_TIME
							   , CASE 
							  	     WHEN c.CHECK_IN_TIME > ct.CHECK_IN_TIME				THEN '지각' 
							         WHEN c.CHECK_OUT_TIME <![CDATA[<]]> ct.CHECK_OUT_TIME 	THEN '조퇴' 
							         ELSE '정상출근'
							     END																	AS ATTENDANCE_TEXT
							       , c.CREATE_DATE 														AS CREATE_DATE
							       , ct.STARTING_DATE 													AS CT_STARTING_DATE
							       , ct.CHECK_IN_TIME 													AS CT_CHECK_IN_TIME
								   , ct.CHECK_OUT_TIME 													AS CT_CHECK_OUT_TIME
						     FROM
						         COMMUTE											c
						         INNER JOIN COMMUTE_TIME 							ct 
						      		     ON c.CHECK_IN_DATE >= ct.STARTING_DATE
						    WHERE
						         1 = 1
						      AND
						         c.member_id = #{id}
						    ORDER BY 
						         c.CHECK_IN_DATE DESC
					) a
					ORDER BY
					 	 CREATE_DATE DESC
				) b
				 WHERE
				 	  1 = 1
				   AND
				 	  ROW_NUM = 1
			 	  <if test='startDate != null and startDate != ""
					 		and endDate != null and endDate != ""'>
					  AND 
						 TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') BETWEEN #{startDate} 
										 						AND #{endDate} 
				  </if>
		 	 )  c
		 GROUP BY
 			  ATTENDANCE_TEXT
    </select>
    
    <select id="getMyCommuteTimeMinMaxDate" resultType="map">
    <!-- getMyCommuteHistoryMinMaxDate 출퇴근기록에서 최대최소일 조회 -->
		SELECT 
		     MAX(STARTING_DATE)		AS MAX_STARTING_DATE
		   , MIN(STARTING_DATE) 	AS MIN_STARTING_DATE
		 FROM
		     COMMUTE_TIME
		WHERE
		  	 1 = 1
	  	 <if test='id != "admin"'>
			  AND
			  	 member_id = #{id}
	  	 </if>
    </select>
    
    <select id="getMyCommuteTime" resultType="map">
    <!-- getMyCommuteTime 내 출퇴근 기준 시간 조회 -->
		SELECT
			  COM_TIME_ID 		AS COM_TIME_ID
			, MEMBER_ID 		AS MEMBER_ID
		  	, CHECK_IN_TIME 	AS CHECK_IN_TIME
			, CHECK_OUT_TIME 	AS CHECK_OUT_TIME
			, STARTING_DATE 	AS STARTING_DATE
	  	  FROM 
		 	  COMMUTE_TIME
		 WHERE
		  	  1 = 1
	  	  <if test='id != "admin"'>
			   AND
			  	  member_id = #{id}
	  	  </if>
	  	  <if test='startDate != null and startDate != ""
   			 		and endDate != null and endDate != ""'>
			  AND 
				  STARTING_DATE BETWEEN #{startDate} 
									AND #{endDate} 
		  </if>
  	     ORDER BY
 	  		  STARTING_DATE DESC
    </select>
    
    <select id="getWeekend" resultType="map">
    <!-- getWeekend 주말 조회 -->
		SELECT TO_CHAR(TO_DATE(DT, 'YYYY-MM-DD'), 'YYYY-MM-DD')	AS DATE_TIME
			 , CASE WHEN TO_CHAR(TO_DATE(DT),'D') IN ('1','7')
		  			THEN '주말'
		            ELSE '평일' 
				END 											AS WEEK_DAY
		  FROM (SELECT TO_CHAR(TO_DATE(ST_DT, 'YYYYMMDD') + LEVEL - 1, 'YYYYMMDD') AS DT
				  FROM (SELECT '20241201' AS ST_DT
							  ,'20241231' AS END_DT
		            	  FROM DUAL)
		CONNECT BY LEVEL <![CDATA[<=]]> TO_DATE(END_DT, 'YYYYMMDD') - TO_DATE(ST_DT, 'YYYYMMDD') + 1)
    </select>
    
    <select id="isDeletableAttendanceTime" resultType="Boolean">
    <!-- isDeletableAttendanceTime 출퇴근 시간 적용 일자 오늘부터 이전까진 삭제 불가 -->
    	SELECT CASE WHEN STARTING_DATE <![CDATA[<=]]> TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') THEN 'false'
					ELSE 'true'
				END				AS IS_DELETABLE
		  FROM COMMUTE_TIME
		 WHERE 
			   1 = 1
		   AND COM_TIME_ID = #{id} 
    </select>

	<delete id="deleteAttendanceTime">
	<!-- deleteAttendanceTime 출퇴근 시간 기준 삭제 -->
		DELETE FROM COMMUTE_TIME
 		 WHERE COM_TIME_ID = #{id}
	</delete>
	
	<select id="isDuplicateAttendanceTime" resultType="Integer">
	<!-- isDuplicateAttendanceTime 출퇴근 시간 insert전 중복 확인 -->
		SELECT COUNT(*)	AS COUNT
		  FROM COMMUTE_TIME
		 WHERE 
			   MEMBER_ID = #{MEMBER_ID} 
		   AND STARTING_DATE = #{STARTING_DATE}
	</select>
   
	<insert id="insertAttendanceTime">
   	<!-- insertAttendanceTime 출퇴근 기준 시간 등록 -->
	   	INSERT INTO COMMUTE_TIME
		VALUES(
			  (SELECT 'CT' || LPAD(NVL(MAX(SUBSTR(COM_TIME_ID, 3)), 0) + 1, 10, 0) FROM COMMUTE_TIME)
			, #{CHECK_IN_TIME}
			, #{CHECK_OUT_TIME}
			, #{MEMBER_ID}
			, CURRENT_DATE
			, #{STARTING_DATE}
		)
	</insert>
	
	<select id="getSelectBoxList" resultType="map">
    <!-- getSelectBoxList 셀렉트박스 목록 조회 -->
	SELECT 
	 		GROUP_ID || '_' || CODE_ID 	AS CODE
	 	  , CODE_NAME 					AS NAME
	  FROM  COMMON_CODE
	 WHERE 
			1 = 1
	   AND  USE_YN = 'Y'
	   <if test='type != null and type != ""'>
			AND  GROUP_ID = #{type}
	   </if>
    </select>
    
    <insert id="insertCheckInTime">
   	<!-- insertCheckTime 출퇴근 등록 -->
	   INSERT INTO COMMUTE (
	         COMMUTE_ID
	       , CHECK_IN_TIME
	       , MEMBER_ID
	       , CHECK_IN_DATE
	       , CREATE_DATE
	   )
	   VALUES (
	         (SELECT 'C' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(COMMUTE_ID, 2))), 0) + 1, 10, '0') FROM COMMUTE)	
	       , TO_CHAR(CURRENT_DATE, 'HH24:MI:SS') 
	       , #{id}
	       , TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') 
	       , CURRENT_DATE
	   )
	</insert>
	
	<update id="insertCheckOutTime">
		UPDATE COMMUTE 
	   	   SET 
	   	   	   CHECK_OUT_TIME = TO_CHAR(CURRENT_DATE, 'HH24:MI:SS')
	       	 , CHECK_OUT_DATE = TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
	 	 WHERE TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') = CHECK_IN_DATE
	</update>
</mapper>