<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.WarehouseMapper">
	<select id="selectWarehouse" resultType="map">
		SELECT
	          W.WAREHOUSE_ID
	        , W.WAREHOUSE_NAME
	        , W.WAREHOUSE_TYPE
	        , COUNT(IL.LOCATION_ID) AS LOCATION_COUNT
	        , W.WAREHOUSE_STATUS 
	    FROM 
	        WAREHOUSE W
	    LEFT JOIN 
	        ITEM_LOCATION IL ON W.WAREHOUSE_ID = IL.WAREHOUSE_ID
	    GROUP BY 
	        W.WAREHOUSE_ID, W.WAREHOUSE_NAME, W.WAREHOUSE_TYPE, W.WAREHOUSE_STATUS
	    ORDER BY 
	        W.WAREHOUSE_ID ASC
	</select>
 
    <insert id="insertWarehouse">
		INSERT ALL
		    <foreach collection="list" item="item">
		        INTO WAREHOUSE (
		              WAREHOUSE_ID
		            , WAREHOUSE_NAME
		            , WAREHOUSE_TYPE
		            , WAREHOUSE_STATUS
		        )
		        VALUES (
		              #{item.WAREHOUSE_ID}
		            , #{item.WAREHOUSE_NAME}
		            , #{item.WAREHOUSE_TYPE} 
		            , #{item.WAREHOUSE_STATUS}
		        )
		    </foreach>
		SELECT * FROM DUAL
    </insert>
    
    <update id="updateWarehouse">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
	        UPDATE WAREHOUSE
	           SET 
	               WAREHOUSE_ID = #{row.WAREHOUSE_ID}
	             , WAREHOUSE_NAME = #{row.WAREHOUSE_NAME}
	             , WAREHOUSE_TYPE = #{row.WAREHOUSE_TYPE}
	             , WAREHOUSE_STATUS = #{row.WAREHOUSE_STATUS}
	         WHERE WAREHOUSE_ID = #{row.WAREHOUSE_ID}
	    </foreach>
    </update>
    
    <delete id="deleteWarehouse">
	    DELETE FROM WAREHOUSE
	     WHERE WAREHOUSE_ID IN
	    <foreach item="id" index="index" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>
    </delete>
    
    <select id="checkDuplicateWhseCode">
    	SELECT count(*) AS COUNT
		  FROM WAREHOUSE
		 WHERE WAREHOUSE_ID = #{WAREHOUSE_ID}
    </select> 
    
    <select id="checkDuplicateLocationCode">
    	SELECT count(*) AS COUNT
		  FROM ITEM_LOCATION
		 WHERE LOCATION_ID = #{LOCATION_ID}
    </select> 
    
    <!-- 창고 제품 위치 조회 -->
    <select id="selectLocation" resultType="map">
		SELECT 
	      IL.LOCATION_ID
	    , IL.LOCATION_NAME
	    , CASE WHEN W.WAREHOUSE_TYPE = '원자재'  THEN IL.MATERIAL_ID 
	           WHEN W.WAREHOUSE_TYPE IN('반제품', '완제품') THEN IL.ITEM_ID
	         END AS PRODUCT_ID
	    , IL.LOCATION_ORDER
<!--	    , TO_CHAR(IL.CURRENT_QUANTITY, 'FM999,999,999,999') AS CURRENT_QUANTITY-->
<!--	    , TO_CHAR(IL.RESERVED_QUANTITY, 'FM999,999,999,999') AS RESERVED_QUANTITY-->
		, CURRENT_QUANTITY
		, RESERVED_QUANTITY
	    , IL.USE_YN
	    , IL.DESCRIPTION
		, W.WAREHOUSE_ID 
		  FROM ITEM_LOCATION IL
		      INNER JOIN WAREHOUSE W 
		            ON IL.WAREHOUSE_ID = W.WAREHOUSE_ID
		 WHERE 
		      1 = 1
		<choose>
		   <when test="warehouse_id != null and warehouse_id != ''">
		      AND IL.WAREHOUSE_ID = #{warehouse_id}
		   </when>
		   <otherwise>
		      AND IL.WAREHOUSE_ID IS NULL
		   </otherwise>
		</choose>
		ORDER BY LOCATION_ID ASC
    </select>
    
    <insert id="insertLocation">
	   INSERT ALL
		    <foreach collection="list" item="item">
		        INTO ITEM_LOCATION (
		            LOCATION_ID
		            , LOCATION_NAME
		            , MATERIAL_ID
		            , ITEM_ID
		            , LOCATION_ORDER
		            , CURRENT_QUANTITY
		            , RESERVED_QUANTITY
		            , USE_YN
		            , DESCRIPTION
		            , WAREHOUSE_ID
		        )
		        VALUES (
		            #{item.LOCATION_ID}
		            , #{item.LOCATION_NAME}
		           ,  CASE 
		                WHEN (SELECT WAREHOUSE_TYPE FROM WAREHOUSE WHERE WAREHOUSE_ID = #{item.WAREHOUSE_ID}) = '원자재' 
		                THEN #{item.PRODUCT_ID} 
		                ELSE ''
		            END
		            , CASE 
		                WHEN (SELECT WAREHOUSE_TYPE FROM WAREHOUSE WHERE WAREHOUSE_ID = #{item.WAREHOUSE_ID}) IN ('반제품', '완제품') 
		                THEN #{item.PRODUCT_ID} 
		                ELSE '' 
		            END
		            , #{item.LOCATION_ORDER}
		            , #{item.CURRENT_QUANTITY}
		            , #{item.RESERVED_QUANTITY}
		            , #{item.USE_YN}
		            , #{item.DESCRIPTION}
		            , #{item.WAREHOUSE_ID}
		        )
		    </foreach>
		SELECT * FROM DUAL
    </insert>
    
	<update id="updateLocation">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
		    UPDATE ITEM_LOCATION IL
		    SET 
		        LOCATION_NAME = #{row.LOCATION_NAME}
		        , MATERIAL_ID = (SELECT CASE 
		                                WHEN W.WAREHOUSE_TYPE = '원자재' THEN #{row.PRODUCT_ID} 
		                                ELSE IL.MATERIAL_ID 
		                             END 
		                       FROM WAREHOUSE W 
		                       WHERE W.WAREHOUSE_ID = IL.WAREHOUSE_ID)
		        , ITEM_ID = (SELECT CASE 
		                            WHEN W.WAREHOUSE_TYPE IN ('반제품', '완제품') THEN #{row.PRODUCT_ID} 
		                            ELSE IL.ITEM_ID 
		                         END 
		                   FROM WAREHOUSE W 
		                   WHERE W.WAREHOUSE_ID = IL.WAREHOUSE_ID)
		        , LOCATION_ORDER = #{row.LOCATION_ORDER}
		        , CURRENT_QUANTITY = #{row.CURRENT_QUANTITY, jdbcType=VARCHAR}
		        , RESERVED_QUANTITY = #{row.RESERVED_QUANTITY, jdbcType=VARCHAR}
		        , USE_YN = #{row.USE_YN}
		        , DESCRIPTION = #{row.DESCRIPTION, jdbcType=VARCHAR}
		    WHERE WAREHOUSE_ID = #{row.WAREHOUSE_ID}
		    AND LOCATION_ID = #{row.LOCATION_ID}
		</foreach>    
	</update>

	
	<delete id="deleteLocation">
		DELETE FROM ITEM_LOCATION
		WHERE LOCATION_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
	        #{id}
	    </foreach>
    </delete>
</mapper>