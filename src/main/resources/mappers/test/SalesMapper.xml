<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.SalesMapper">
	<select id="selectOrder" resultType="map">
		SELECT 
			   oi.ORDER_ID			AS ORDER_ID
			 , oi.ORDER_DATE 		AS ORDER_DATE
			 , oi.STATUS			AS STATUS_CODE
			 , mc.SUB_NAME 			AS STATUS_NAME
			 , oi.CLIENT_ID 		AS CLIENT_ID
			 , c.CLIENT_NAME 		AS CLIENT_NAME
			 , oi.ITEM_ID 			AS ITEM_ID
			 , i.ITEM_NAME 			AS ITEM_NAME
			 , oi.DELIVERY_DATE 	AS DELIVERY_DATE
			 , oi.QUANTITY 			AS QUANTITY
			 , oi.NOTE 				AS NOTE
			 , oi.PRICE 			AS PRICE
		  FROM ORDER_INTAKE oi 
			   INNER JOIN MES_COMMON mc 
					   ON oi.STATUS = mc.CLASSIFICATION_ID 
			   INNER JOIN CLIENT c 
					   ON oi.CLIENT_ID = c.CLIENT_ID 
			   INNER JOIN ITEM i 
					   ON oi.ITEM_ID = i.ITEM_ID 
	</select>
	
	<select id="selectOrderClient" resultType="map">
		SELECT
			   CLIENT_ID 
			 , CLIENT_NAME 
		  FROM CLIENT
	</select>
	
	<select id="selectOrderItem" resultType="map">
		SELECT
			   ITEM_ID
			 , ITEM_NAME
			 , ITEM_TYPE
		  FROM ITEM
		 WHERE USE_YN = 'Y'
	</select>
	
	<insert id="insertOrder">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO ORDER_INTAKE (
				  ORDER_ID
				, ORDER_DATE
				, STATUS
				, CLIENT_ID
				, ITEM_ID
				, DELIVERY_DATE
				, QUANTITY
				, NOTE
				, PRICE
			)
			VALUES (
				  #{item.ORDER_ID}
				, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
				,'OS-001'
				, #{item.CLIENT_ID}
				, #{item.ITEM_ID}
				, #{item.DELIVERY_DATE}
				, #{item.QUANTITY}
				, #{item.NOTE, jdbcType=VARCHAR}
				, (
					SELECT TO_NUMBER(NVL(ITEM_COST, 0) * #{item.QUANTITY})
					  FROM item
					 WHERE ITEM_ID = #{item.ITEM_ID}
				)
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
	<update id="updateOrder">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE ORDER_INTAKE 
			   SET 
				   DELIVERY_DATE = #{row.DELIVERY_DATE, jdbcType=VARCHAR}
				 , NOTE = #{row.NOTE, jdbcType=VARCHAR}
			 WHERE ORDER_ID = #{row.ORDER_ID}
		</foreach>
	</update>
	
	<select id="selectTodayMaxOrderId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(ORDER_ID, '-([0-9]+)$', 1, 1, NULL, 1))), 0) + 1 AS MAX_NUMBER
		  FROM ORDER_INTAKE
		 WHERE ORDER_ID LIKE '%' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '%'
	</select>
	
	<delete id="deleteOrder">
		DELETE FROM ORDER_INTAKE
		 WHERE ORDER_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<select id="selectRequestOrder" resultType="map">
		SELECT
			   oi.ORDER_ID 		AS ORDER_ID
			 , oi.ORDER_DATE 	AS ORDER_DATE
			 , oi.CLIENT_ID 	AS CLIENT_ID
			 , c.CLIENT_NAME 	AS CLIENT_NAME
			 , oi.ITEM_ID 		AS ITEM_ID
			 , i.ITEM_NAME 		AS ITEM_NAME
			 , oi.QUANTITY 		AS QUANTITY
		  FROM ORDER_INTAKE oi
			   INNER JOIN CLIENT c 
			   		   ON oi.CLIENT_ID = c.CLIENT_ID 
			   INNER JOIN ITEM i 
			   		   ON oi.ITEM_ID = i.ITEM_ID 
		 WHERE 
		 	   1 = 1
		   AND oi.STATUS = 'OS-001'
		   AND oi.ORDER_ID NOT IN (SELECT ORDER_INTAKE_ID FROM SHIPMENT_REQUEST)
	</select>
	
	<insert id="insertRequestOrder">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO SHIPMENT_REQUEST (
				  SHIPMENT_REQUEST_ID
				, ORDER_INTAKE_ID
				, REQUEST_DATE
				, STATUS
				, QUANTITY
			)
			VALUES (
				  #{item.SHIPMENT_REQUEST_ID}
				, #{item.ORDER_ID}
				, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
				, 'RS-001'
				, #{item.QUANTITY}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
	<select id="selectTodayMaxShipmentRequestId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(SHIPMENT_REQUEST_ID, '-([0-9]+)$', 1, 1, NULL, 1))), 0) + 1 AS MAX_NUMBER
		  FROM SHIPMENT_REQUEST
		 WHERE SHIPMENT_REQUEST_ID LIKE '%' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '%'
	</select>
	
	<select id="selectShipmentRequest" resultType="map">
		SELECT
			   sr.SHIPMENT_REQUEST_ID		AS SHIPMENT_REQUEST_ID
			 , sr.ORDER_INTAKE_ID			AS ORDER_INTAKE_ID
			 , sr.REQUEST_DATE				AS REQUEST_DATE
			 , sr.STATUS					AS STATUS_CODE
			 , sr.SHIPMENT_COMPLETION_DATE	AS SHIPMENT_COMPLETION_DATE
			 , sr.QUANTITY					AS QUANTITY
			 , mc.SUB_NAME					AS STATUS_NAME
			 , i.ITEM_NAME					AS ITEM_NAME
			 , i.ITEM_UNIT 					AS ITEM_UNIT
		  FROM SHIPMENT_REQUEST sr
			   INNER JOIN MES_COMMON mc
			   		   ON sr.STATUS = mc.CLASSIFICATION_ID
			   INNER JOIN ORDER_INTAKE oi
			   		   ON sr.ORDER_INTAKE_ID = oi.ORDER_ID
			   INNER JOIN ITEM i
			   		   ON oi.ITEM_ID = i.ITEM_ID
	</select>
	
	<select id="selectShipmentRequestDetailLot" resultType="map">
		WITH SHIPMENT_DATA AS (
			SELECT 
				   oi.ITEM_ID																	AS ITEM_ID
			 	 , i.ITEM_NAME																	AS ITEM_NAME
				 , i.ITEM_UNIT																	AS ITEM_UNIT
				 , pl.PRODUCTION_LOT_ID															AS PRODUCTION_LOT_ID
				 , pl.CREATE_DATE																AS CREATE_DATE
				 , pl.QUANTITY																	AS CURRENT_QUANTITY
				 , w.WAREHOUSE_NAME																AS WAREHOUSE_NAME
				 , SUM(pl.QUANTITY) OVER (PARTITION BY oi.ITEM_ID ORDER BY pl.CREATE_DATE ASC) 	AS CUM_SUM
			  FROM SHIPMENT_REQUEST sr
				   INNER JOIN ORDER_INTAKE oi 
						   ON sr.ORDER_INTAKE_ID = oi.ORDER_ID 
				   INNER JOIN ITEM i 
						   ON oi.ITEM_ID = i.ITEM_ID 
				   INNER JOIN PRODUCTION_LOT pl 
						   ON i.ITEM_ID = pl.ITEM_ID 
				   INNER JOIN ITEM_LOCATION il 
						   ON i.ITEM_ID = il.ITEM_ID 
				   INNER JOIN WAREHOUSE w 
						   ON il.WAREHOUSE_ID = w.WAREHOUSE_ID 
			 WHERE
				   1 = 1
			   AND sr.SHIPMENT_REQUEST_ID = #{shipment_request_id}
			   AND pl.QUANTITY > 0
			 ORDER BY pl.CREATE_DATE ASC
		)
		SELECT 
			   SHIPMENT_DATA.*
			 , CASE 
					WHEN CUM_SUM - CURRENT_QUANTITY >= #{request_quantity} 	THEN 0
					WHEN CUM_SUM >= #{request_quantity} 					THEN #{request_quantity} - (CUM_SUM - CURRENT_QUANTITY)
					ELSE CURRENT_QUANTITY
			   END AS SHIPPED_QUANTITY
			 , CASE 
					WHEN (CASE 
								WHEN CUM_SUM - CURRENT_QUANTITY >= #{request_quantity} 	THEN 0
								WHEN CUM_SUM >= #{request_quantity} 					THEN #{request_quantity} - (CUM_SUM - CURRENT_QUANTITY)
								ELSE CURRENT_QUANTITY
						   END) > 0 THEN 'Y'
					ELSE 'N'
			   END AS SHIPPED_FLAG
		  FROM SHIPMENT_DATA
	</select>
	
	<select id="selectShipmentRequestDetail" resultType="map">
		SELECT
			   srd.ITEM_LOT 
			 , srd.QUANTITY
			 , i.ITEM_UNIT 
			 , pl.CREATE_DATE 
			 , w.WAREHOUSE_NAME 
		  FROM SHIPMENT_REQUEST_DETAIL srd 
			   INNER JOIN SHIPMENT_REQUEST sr 
					   ON srd.SHIPMENT_REQUEST_ID = sr.SHIPMENT_REQUEST_ID 
			   INNER JOIN ORDER_INTAKE oi 
					   ON sr.ORDER_INTAKE_ID = oi.ORDER_ID 
			   INNER JOIN ITEM i 
					   ON oi.ITEM_ID = i.ITEM_ID
			   INNER JOIN PRODUCTION_LOT pl 
					   ON srd.ITEM_LOT = pl.PRODUCTION_LOT_ID 
			   INNER JOIN ITEM_LOCATION il 
					   ON i.ITEM_ID = il.ITEM_ID 
			   INNER JOIN WAREHOUSE w 
					   ON il.WAREHOUSE_ID = w.WAREHOUSE_ID 
		 WHERE srd.SHIPMENT_REQUEST_ID = #{shipment_request_id}
	</select>
</mapper>
