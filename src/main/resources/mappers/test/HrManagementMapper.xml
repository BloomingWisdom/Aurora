<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.HrManagementMapper">
<!--    <select id="selectTest" resultType="string">-->
<!--        SELECT -->
<!--        	  TO_CHAR(SYSDATE, 'yyyy-mm-dd')-->
<!--  		  FROM -->
<!--  			  dual-->
<!--    </select>-->
	
 	<insert id="insertMember" useGeneratedKeys="true" keyProperty="ID"> 
		INSERT INTO MEMBER 
		<trim prefix="(" suffix=")" suffixOverrides=",">
	        <if test="NAME != null">NAME,</if>
	        <if test="RESIDENT_REGIST_NUM != null">RESIDENT_REGIST_NUM,</if>
	        <if test="ADDRESS_NUM != null">ADDRESS_NUM,</if>
	        <if test="ADDRESS1 != null">ADDRESS1,</if>
	        <if test="ADDRESS2 != null">ADDRESS2,</if>
	        <if test="EMAIL != null">EMAIL,</if>
	        <if test="PHONE != null">PHONE,</if>
	        <if test="JOIN_DATE != null">JOIN_DATE,</if>
	        <if test="SALARY != null">SALARY,</if>
			<if test="BANK_CODE != null">BANK_CODE,</if>
			<if test="ACCOUNT != null">ACCOUNT,</if>
			<if test="ACCOUNT_HOLDER != null">ACCOUNT_HOLDER,</if>
			<if test="DEPT_ID != null">DEPT_ID,</if>
			<if test="GRADE_ID != null">GRADE_ID,</if>
	    </trim>
	    VALUES
	    <trim prefix="(" suffix=")" suffixOverrides=",">
	        <if test="NAME != null">#{NAME},</if>
	        <if test="RESIDENT_REGIST_NUM != null">#{RESIDENT_REGIST_NUM},</if>
	        <if test="ADDRESS_NUM != null">#{ADDRESS_NUM},</if>
	        <if test="ADDRESS1 != null">#{ADDRESS1},</if>
	        <if test="ADDRESS2 != null">#{ADDRESS2},</if>
	        <if test="EMAIL != null">#{EMAIL},</if>
	        <if test="PHONE != null">#{PHONE},</if>
	        <if test="JOIN_DATE != null">#{JOIN_DATE},</if>
	        <if test="SALARY != null">#{SALARY},</if>
			<if test="BANK_CODE != null">#{BANK_CODE},</if>
			<if test="ACCOUNT != null">#{ACCOUNT},</if>
			<if test="ACCOUNT_HOLDER != null">#{ACCOUNT_HOLDER},</if>
			<if test="DEPT_ID != null">#{DEPT_ID},</if>
			<if test="GRADE_ID != null">#{GRADE_ID},</if>
	    </trim>
 	</insert> 
 	
 	<update id="updateMember" >
 		UPDATE
 			   MEMBER
 		   SET
		<trim suffixOverrides=",">
			<if test="NAME != null">NAME = #{NAME},</if>
			<if test="RESIDENT_REGIST_NUM != null">RESIDENT_REGIST_NUM = #{RESIDENT_REGIST_NUM},</if>
			<if test="ADDRESS_NUM != null">ADDRESS_NUM = #{ADDRESS_NUM},</if>
			<if test="ADDRESS1 != null">ADDRESS1 = #{ADDRESS1},</if>
			<if test="ADDRESS2 != null">ADDRESS2 = #{ADDRESS2},</if>
			<if test="EMAIL != null">EMAIL = #{EMAIL},</if>
			<if test="PHONE != null">PHONE = #{PHONE},</if>
			<if test="JOIN_DATE != null">JOIN_DATE = #{JOIN_DATE},</if>
			<if test="SALARY != null">SALARY = #{SALARY},</if>
			<if test="BANK_CODE != null">BANK_CODE = #{BANK_CODE},</if>
			<if test="ACCOUNT != null">ACCOUNT = #{ACCOUNT},</if>
			<if test="ACCOUNT_HOLDER != null">ACCOUNT_HOLDER = #{ACCOUNT_HOLDER},</if>
			<if test="DEPT_ID != null">DEPT_ID = #{DEPT_ID},</if>
			<if test="GRADE_ID != null">GRADE_ID = #{GRADE_ID},</if>
		</trim>
 		 WHERE
 		 	   MEMBER_ID = #{MEMBER_ID}
 	</update>
 	
 	<insert id="insertHistory">
 		
 	</insert>
 	
    <select id="selectMemberList" resultType="map">
    
    	SELECT
			   M.JOIN_DATE
			 , M.MEMBER_ID 
			 , M.NAME 
			 , M.PHONE 
			 , M.EMAIL 
			 , CC_DEPT.CODE_NAME AS DEPARTMENT
			 , CC_GRADE.CODE_NAME AS GRADE
		  FROM MEMBER M
	 LEFT JOIN COMMON_CODE CC_DEPT
	 								ON M.DEPT_ID = CC_DEPT.CODE_ID
	 							   AND CC_DEPT.GROUP_ID = 'DEP'
	 LEFT JOIN COMMON_CODE CC_GRADE
	 								ON M.GRADE_ID = CC_GRADE.CODE_ID 
	 							   AND CC_GRADE.GROUP_ID = 'RANK'
		 WHERE M.USE_YN = 'Y'
      ORDER BY M.CREATE_DATE DESC
    </select>
    
    <!-- 사원 상세 정보 -->
    <select id="selectMember" resultType="map">
    
		SELECT
			   MEMBER_ID
			 , NAME
			 , RESIDENT_REGIST_NUM
			 , ADDRESS_NUM
			 , ADDRESS1
			 , ADDRESS2
			 , EMAIL
			 , PHONE
			 , JOIN_DATE
			 , SALARY
			 , BANK_CODE
			 , ACCOUNT
			 , ACCOUNT_HOLDER
			 , DEPT_ID
			 , GRADE_ID
		  FROM
			   MEMBER 
		 WHERE
		 	   MEMBER_ID = #{MEMBER_ID}
    
    </select>
    
    <!--
    <select id="selectOrganizationData" resultType="map">
	SELECT JSON_OBJECT(
        'bankCodes' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT('code' VALUE CODE, 'bankName' VALUE BANK_NAME)
            )
            FROM BANK_CODES
        ),
        'departments' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'id' VALUE ID,
                    'name' VALUE NAME,
                    'subDepartments' VALUE (
                        SELECT JSON_ARRAYAGG(
                            JSON_OBJECT(
                                'id' VALUE ID,
                                'name' VALUE NAME,
                                'subDepartments' VALUE NULL
                            )
                        )
                        FROM DEPARTMENT CHILD
                        WHERE CHILD.PARENT_DEPARTMENT_ID = PARENT.ID
                    )
                )
            )
            FROM DEPARTMENT PARENT
            WHERE PARENT.PARENT_DEPARTMENT_ID IS NULL
        ),
        'grades' VALUE (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT('id' VALUE ID, 'name' VALUE NAME)
            )
            FROM GRADE
        )
    ) AS ORGANIZATION_DATA
    FROM DUAL;
    </select>
    -->
    <select id="selectOrganizationData" resultType="map">
    	SELECT 
				c.GROUP_ID AS GROUP_ID		
				, d.DEPT_ID	AS ID		
				, d.PARENT_DEPT_ID	AS PARENT
				, c.CODE_NAME	AS NAME
		  FROM 
				DEPARTMENT d
		  JOIN 
				COMMON_CODE c
			ON 
				d.DEPT_ID = c.CODE_ID
		 WHERE 
				c.USE_YN = 'Y' AND d.PARENT_DEPT_ID IS NOT NULL
		UNION ALL
		SELECT 
				GROUP_ID 
				, CODE_ID
				, 'none'
				, CODE_NAME
		  FROM
	  			 COMMON_CODE CC 
		WHERE
				GROUP_ID = 'RANK' AND USE_YN = 'Y'
		UNION ALL
		SELECT
				'BANK'
				, TO_CHAR(CODE)
				, 'none'
				, BANK_NAME
		FROM
				BANK_CODES
    </select>
</mapper>
