<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 오라클 MyBatis 사용시 문장 끝에 세미콜론 있으면 오류남! -->

<mapper namespace="com.itwillbs.repository.ManufactureMapper">

	<select id="selectWorkcenter" resultType="map">
		SELECT
			   w.WORKCENTER_ID
			 , w.NAME
			 , w.USE_YN
			 , w.NOTE
			 , w.MANAGER_ID
			 , w.ROUTING_ID
			 , (  -- 워크센터 비가동 중이거나 앞으로의 작업 대기열 없을 때
				SELECT (
					SELECT COUNT(*) 
					  FROM PRODUCTION_ORDER_DETAIL
					 WHERE 
						   1 = 1
					   AND WORKCENTER_ID = w.WORKCENTER_ID
					   AND STATUS IN('ST-001', 'ST-002')  -- 대기중, 진행중
				) + (
					SELECT COUNT(*) 
					  FROM WORKCENTER_LOG
					 WHERE WORKCENTER_ID = w.WORKCENTER_ID
				)
				FROM DUAL
			 ) AS USING_CNT
			 , (  -- 워크센터 사용 Y하려면 등록된 라우팅이 먼저 Y가 되야됨.
				SELECT COUNT(*) 
				  FROM ROUTING r
				 WHERE 
					   1 = 1
				   AND USE_YN = 'N'
				   AND ROUTING_ID = w.ROUTING_ID
			 ) AS USED_N_CNT
		  FROM WORKCENTER w
	</select>

	<insert id="insertWorkcenter">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO WORKCENTER (
				  MANAGER_ID
				, NAME
				, NOTE
				, ROUTING_ID
				, USE_YN
				, WORKCENTER_ID
			)
			VALUES (
				  #{item.MANAGER_ID, jdbcType=VARCHAR}
				, #{item.NAME}
				, #{item.NOTE, jdbcType=VARCHAR}
				, #{item.ROUTING_ID, jdbcType=VARCHAR}
				, #{item.USE_YN}
				, #{item.WORKCENTER_ID}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<delete id="deleteWorkcenter">
		DELETE FROM WORKCENTER
		 WHERE WORKCENTER_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<update id="updateWorkcenter">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE WORKCENTER
			   SET 
				   NAME = #{row.NAME}
				 , NOTE = #{row.NOTE, jdbcType=VARCHAR}
				 , ROUTING_ID = #{row.ROUTING_ID, jdbcType=VARCHAR}
				 , USE_YN = #{row.USE_YN}
				 , MANAGER_ID = #{row.MANAGER_ID, jdbcType=VARCHAR}
			 WHERE WORKCENTER_ID = #{row.WORKCENTER_ID}
		</foreach>
	</update>

	<select id="selectWorkcenterManager" resultType="map">
		SELECT 
			   m.MEMBER_ID 	AS MEMBER_ID
			 , m.NAME 		AS NAME
			 , cc.CODE_NAME AS DEPT
		  FROM MEMBER m
			   INNER JOIN COMMON_CODE cc 
					   ON m.DEPT_ID = cc.CODE_ID 
		 WHERE 
		 	   1 = 1
		<if test='dept_id != null and dept_id != ""'>
		   AND m.DEPT_ID = #{dept_id}
		</if>
		<if test='member_name != null and member_name != ""'>
		   AND m.NAME = #{member_name}
		</if>
	</select>

	<select id="selectEquipment" resultType="map">
		SELECT 
			   EQUIPMENT_ID 	AS EQUIPMENT_ID
			 , EQUIPMENT_NAME 	AS EQUIPMENT_NAME
			 , EQUIPMENT_STATUS AS EQUIPMENT_STATUS
			 , EQUIPMENT_NOTE 	AS EQUIPMENT_NOTE
			 , WORKCENTER_ID	AS WORKCENTER_ID
		  FROM EQUIPMENT
		 WHERE
		 	   1 = 1
		<choose>
			<when test='workcenter_id != null and workcenter_id != ""'>
				AND WORKCENTER_ID = #{workcenter_id}
			</when>
			<otherwise>
				AND WORKCENTER_ID IS NULL
			</otherwise>
		</choose>
		<if test='use_yn != null and use_yn != ""'>
			AND EQUIPMENT_STATUS = #{use_yn}
		</if>
		<if test='searchKeyword != null and searchKeyword != ""'>
			AND (EQUIPMENT_ID LIKE concat('%', concat(#{searchKeyword}, '%'))
					OR EQUIPMENT_NAME LIKE concat('%', concat(#{searchKeyword}, '%')))
		</if>
	</select>

	<update id="insertEquipment">
		<foreach collection="list" item="item" open="DECLARE BEGIN" separator=";" close="; END;">
			UPDATE EQUIPMENT 
			   SET WORKCENTER_ID = #{item.WORKCENTER_ID}
			 WHERE EQUIPMENT_ID = #{item.EQUIPMENT_ID}
		</foreach>
	</update>

	<update id="deleteEquipment">
		<foreach collection="list" item="item" open="DECLARE BEGIN" separator=";" close="; END;">
			UPDATE EQUIPMENT 
			   SET WORKCENTER_ID = NULL
			 WHERE EQUIPMENT_ID = #{item}
		</foreach>
	</update>

	<update id="deleteEquipmentByWorkcenterId">
		<foreach collection="list" item="item" open="DECLARE BEGIN" separator=";" close="; END;">
			UPDATE EQUIPMENT 
			   SET WORKCENTER_ID = NULL
			 WHERE WORKCENTER_ID = #{item}
		</foreach>
	</update>

	<select id="selectProcess" resultType="map">
		SELECT
			   p.PROCESS_ID 
			 , p.NAME 
			 , p.USE_YN 
			 , p.INSPECTION_YN 
			 , p.NOTE 
			 , (
				SELECT COUNT(*) 
				  FROM PROCESS_ROUTING_MAPPING prm
					   INNER JOIN ROUTING r 
							   ON prm.ROUTING_ID = r.ROUTING_ID 
				 WHERE 
					   1 = 1
				   AND prm.PROCESS_ID = p.PROCESS_ID
				   AND r.USE_YN = 'Y'
			 ) AS using_cnt
		  FROM PROCESS p
		 WHERE
			   1 = 1
		<if test='inspection_yn != null and inspection_yn != ""'>
			AND INSPECTION_YN = #{inspection_yn}
		</if>
		<if test='use_yn != null and use_yn != ""'>
			AND USE_YN = #{use_yn}
		</if>
		<if test='searchKeyword != null and searchKeyword != ""'>
			AND (PROCESS_ID LIKE concat('%', concat(#{searchKeyword}, '%'))
					OR NAME LIKE concat('%', concat(#{searchKeyword}, '%')))
		</if>
	</select>

	<select id="checkDuplicateCode">
		SELECT count(*) AS COUNT
		  FROM ${tableName}
		 WHERE ${tableCodeId} = #{codeVal}
	</select>

	<insert id="insertProcess">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO PROCESS (
				  PROCESS_ID
				, NAME
				, USE_YN
				, INSPECTION_YN
				, NOTE
			)
			VALUES (
				  #{item.PROCESS_ID, jdbcType=VARCHAR}
				, #{item.NAME}
				, #{item.USE_YN}
				, 'N'
				, #{item.NOTE, jdbcType=VARCHAR}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<update id="updateProcess">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE PROCESS
			   SET 
				   NAME = #{row.NAME}
				 , USE_YN = #{row.USE_YN}
				 , INSPECTION_YN = #{row.INSPECTION_YN}
				 , NOTE = #{row.NOTE, jdbcType=VARCHAR}
			 WHERE PROCESS_ID = #{row.PROCESS_ID}
		</foreach>
	</update>

	<delete id="deleteProcess">
		DELETE FROM PROCESS
		 WHERE PROCESS_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="selectRouting" resultType="map">
		SELECT DISTINCT 
			   r.ROUTING_ID			AS ROUTING_ID
			 , r.NAME				AS  NAME
			 , r.USE_YN				AS USE_YN
			 , r.ITEM_ID			AS ITEM_ID
			 , i.ITEM_NAME 			AS ITEM_NAME
			 , r.NOTE				AS NOTE
			 , r.PROCESS_QUANTITY	AS PROCESS_QUANTITY
			 , (  -- 워크센터에서 해당 라우팅 사용 중일시 라우팅 사용여부 N 불가
				SELECT COUNT(*) 
				  FROM WORKCENTER 
				 WHERE 
					   1 = 1
				   AND ROUTING_ID = r.ROUTING_ID
				   AND USE_YN = 'Y'
			 ) AS USING_CNT
			 , (  -- 해당 라우팅에 할당된 공정이 미사용 상태일시 라우팅 사용여부 Y 불가
				SELECT COUNT(*) 
				  FROM PROCESS_ROUTING_MAPPING prm
					   INNER JOIN PROCESS p 
							   ON prm.PROCESS_ID = p.PROCESS_ID 
				 WHERE 
					   1 = 1
				   AND prm.PROCESS_ID IN(SELECT PROCESS_ID FROM PROCESS_ROUTING_MAPPING WHERE ROUTING_ID = r.ROUTING_ID)
				   AND p.USE_YN = 'N'
			 ) AS USED_N_CNT
		  FROM ROUTING r
			   INNER JOIN ITEM i
					   ON r.ITEM_ID = i.ITEM_ID
		 WHERE 
			   1 = 1
		<if test='use_yn != null and use_yn != ""'>
			AND r.USE_YN = 'Y'
		</if>
		<if test='searchKeyword != null and searchKeyword != ""'>
			AND (r.ROUTING_ID LIKE concat('%', concat(#{searchKeyword}, '%'))
					OR r.NAME LIKE concat('%', concat(#{searchKeyword}, '%')))
		</if>
	</select>

	<select id="selectRoutingItem" resultType="map">
		SELECT
			   ITEM_ID
			 , ITEM_NAME
			 , ITEM_TYPE
			 , USE_YN
		  FROM ITEM
		 WHERE 
			   1 = 1
		   AND ITEM_ID NOT IN (SELECT ITEM_ID FROM ROUTING)
		   AND USE_YN = 'Y'
	</select>

	<insert id="insertRouting">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO ROUTING (
				  ROUTING_ID
				, NAME
				, USE_YN
				, ITEM_ID
				, NOTE
				, PROCESS_QUANTITY
			)
			VALUES (
				  #{item.ROUTING_ID}
				, #{item.NAME}
				, #{item.USE_YN}
				, #{item.ITEM_ID}
				, #{item.NOTE, jdbcType=VARCHAR}
				, 0
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<update id="updateRouting">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE ROUTING
			   SET 
				   NAME = #{row.NAME}
				 , USE_YN = #{row.USE_YN}
				 , NOTE = #{row.NOTE, jdbcType=VARCHAR}
			 WHERE ROUTING_ID = #{row.ROUTING_ID}
		</foreach>
	</update>

	<delete id="deleteRouting">
		DELETE FROM ROUTING
		 WHERE ROUTING_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<delete id="deleteRoutingSequence">
		DELETE FROM PROCESS_ROUTING_MAPPING
		 WHERE ROUTING_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="selectRoutingSequence" resultType="map">
		SELECT 
			   prm.SORT_ORDER 		AS SORT_ORDER
			 , p.NAME 				AS NAME
			 , prm.PROCESS_ID 		AS PROCESS_ID
			 , p.INSPECTION_YN 		AS INSPECTION_YN
			 , prm.IS_LAST_ORDER 	AS IS_LAST_ORDER
		  FROM PROCESS_ROUTING_MAPPING prm
			   INNER JOIN PROCESS p 
					   ON prm.PROCESS_ID = p.PROCESS_ID 
		 WHERE prm.ROUTING_ID = #{routing_id}
	</select>

	<insert id="insertRoutingSequence">
<!--     	트리거  -->

<!-- 	    CREATE SEQUENCE SEQ_PROCESS_ROUTING_MAPPING_ID -->
<!-- 	    START WITH 1 -->
<!-- 	    INCREMENT BY 1 -->
<!-- 	    NOCACHE -->
<!-- 	    NOCYCLE; -->

<!--     	CREATE OR REPLACE TRIGGER TRG_PROCESS_ROUTING_MAPPING_ID -->
<!-- 		BEFORE INSERT ON PROCESS_ROUTING_MAPPING -->
<!-- 		FOR EACH ROW -->
<!-- 		BEGIN -->
<!-- 		    :NEW.PROCESS_ROUTING_MAPPING_ID := 'PRM' || LPAD(SEQ_PROCESS_ROUTING_MAPPING_ID.NEXTVAL, 10, '0'); -->
<!-- 		END; -->

		INSERT ALL
		<foreach collection="list" item="item">
			INTO PROCESS_ROUTING_MAPPING (
				  PROCESS_ID
				, ROUTING_ID
				, SORT_ORDER
				, IS_LAST_ORDER
			)
			VALUES (
				  #{item.PROCESS_ID}
				, #{item.ROUTING_ID}
				, #{item.SORT_ORDER}
				, #{item.IS_LAST_ORDER}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<update id="updateRoutingProcessQuantity">
		UPDATE ROUTING
		   SET PROCESS_QUANTITY = #{createdRowsCnt}
		 WHERE ROUTING_ID = #{ROUTING_ID}
	</update>

	<select id="selectProductionOrder" resultType="map">
		SELECT
			   pr.PRODUCTION_ORDER_ID 
			 , pr.CREATE_DATE || ' ' || pr.CREATE_TIME AS CREATE_DATETIME
			 , pr.AMOUNT 
			 , pr.STATUS 
			 , pr.ITEM_ID 
			 , pr.ORDER_DETAIL_QUANTITY 
			 , mc.SUB_NAME 
			 , i.ITEM_NAME 
			 , i.ITEM_UNIT 
			 , (SELECT COUNT(*) AS STARTED_PROCESS_CNT 
				  FROM PRODUCTION_ORDER_DETAIL pod
				 WHERE 
				 	   1 = 1
				   AND PRODUCTION_ORDER_ID = pr.PRODUCTION_ORDER_ID
				   AND STATUS IN ('ST-002', 'ST-003')) 					AS DISABLE_CHECK_CNT
		  FROM PRODUCTION_ORDER pr
			   INNER JOIN MES_COMMON mc
					   ON pr.STATUS = mc.CLASSIFICATION_ID
			   INNER JOIN ITEM i 
					   ON pr.ITEM_ID = i.ITEM_ID 
		 ORDER BY pr.PRODUCTION_ORDER_ID DESC
	</select>

	<select id="selectProductionOrderDetail" resultType="map">
		SELECT
			   pod.PRODUCTION_ORDER_ID			AS PRODUCTION_ORDER_ID
			 , pod.PRODUCTION_ORDER_DETAIL_ID 	AS PRODUCTION_ORDER_DETAIL_ID
			 , pod.ITEM_ID 						AS ITEM_ID
			 , pod.AMOUNT 						AS AMOUNT
			 , pod.STATUS 						AS STATUS
			 , POD.WORKCENTER_ID 				AS WORKCENTER_ID
			 , MC.SUB_NAME 						AS STATUS_NAME
			 , W.NAME 							AS WORKCENTER_NAME
			 , i.ITEM_NAME 						AS ITEM_NAME
			 , i.ITEM_UNIT 						AS ITEM_UNIT
		  FROM PRODUCTION_ORDER_DETAIL pod
			   INNER JOIN MES_COMMON mc 
					   ON pod.STATUS = mc.CLASSIFICATION_ID 
			   INNER JOIN WORKCENTER w 
					   ON pod.WORKCENTER_ID = w.WORKCENTER_ID 
			   INNER JOIN ITEM i 
					   ON pod.ITEM_ID = i.ITEM_ID 
		 WHERE PRODUCTION_ORDER_ID = #{productionOrder_id}
	</select>

	<select id="selectProductionOrderItem" resultType="map">
		SELECT
			   ITEM_ID
			 , ITEM_NAME
			 , ITEM_TYPE
			 , USE_YN
			 , ITEM_UNIT 
		  FROM ITEM
		 WHERE USE_YN = 'Y'
	</select>

	<insert id="insertProductionOrder">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO PRODUCTION_ORDER(
				  PRODUCTION_ORDER_ID
				, CREATE_DATE
				, CREATE_TIME
				, AMOUNT
				, STATUS
				, ITEM_ID
				, ORDER_DETAIL_QUANTITY
			)
			VALUES(
				  #{item.PRODUCTION_ORDER_ID}
				, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
				, TO_CHAR(CURRENT_DATE, 'HH24:MI:SS')
				, #{item.AMOUNT}
				, 'ST-001'
				, #{item.ITEM_ID}
				, 0
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<select id="selectProductionOrderBOM" resultType="map">
		WITH hierarchy_item AS
		(
			SELECT 
				   LEVEL AS HIERARCHY_LEVEL
				 , BOM_ID
				 , ITEM_ID
			  FROM BOM
			 START WITH ITEM_ID = #{item_id}
			CONNECT BY PRIOR ITEM_ID = PARENT_ID
		)
		SELECT
			   BD.COMPONENT_ID 					AS ITEM_ID
			 , I2.ITEM_NAME 					AS ITEM_NAME
			 , BD.UNIT 							AS ITEM_UNIT
			 , BD.REQUIRED_AMOUNT * ${amount}	AS AMOUNT
		  FROM hierarchy_item hi
			   INNER JOIN ITEM i
					   ON hi.item_id = i.ITEM_ID 
			   INNER JOIN BOM_DETAIL bd
					   ON hi.bom_id = bd.BOM_ID
			   INNER JOIN item i2
					   ON bd.COMPONENT_ID = i2.ITEM_ID
		 UNION ALL 
		 SELECT
			   i.ITEM_ID 		AS ITEM_ID
			 , i.ITEM_NAME 		AS ITEM_NAME
			 , i.ITEM_UNIT 		AS ITEM_UNIT
			 , ${amount}		AS AMOUNT
		  FROM ITEM i
		 WHERE i.ITEM_ID = #{item_id}
	</select>

	<select id="selectProductionOrderWorkcenter" resultType="map">
		SELECT 
			   w.WORKCENTER_ID 
			 , w.NAME 
		  FROM WORKCENTER w
			   INNER JOIN ROUTING r
					   ON w.ROUTING_ID = r.ROUTING_ID 
		 WHERE r.ITEM_ID = #{item_id}
	</select>

	<select id="selectTodayMaxProductionOrderDetailId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(PRODUCTION_ORDER_DETAIL_ID, '-([0-9]+)$', 1, 1, NULL, 1))), 0) + 1 AS MAX_NUMBER
		  FROM PRODUCTION_ORDER_DETAIL
		 WHERE PRODUCTION_ORDER_DETAIL_ID LIKE '%' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '%'
	</select>

	<insert id="insertProductionOrderDetail">
		INSERT ALL
		<foreach collection="list" item="item">
		    INTO PRODUCTION_ORDER_DETAIL(
				  PRODUCTION_ORDER_DETAIL_ID
				, PRODUCTION_ORDER_ID
				, ITEM_ID
				, AMOUNT
				, STATUS
				, WORKCENTER_ID
			) VALUES (
			  	  #{item.PRODUCTION_ORDER_DETAIL_ID}
				, #{item.PRODUCTION_ORDER_ID}
				, #{item.ITEM_ID}
				, #{item.AMOUNT}
				, 'ST-001'
				, #{item.WORKCENTER_ID}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<select id="selectTodayMaxProductionOrderId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(PRODUCTION_ORDER_ID, '-([0-9]+)$', 1, 1, NULL, 1))), 0) + 1 AS MAX_NUMBER
		  FROM PRODUCTION_ORDER
		 WHERE PRODUCTION_ORDER_ID LIKE '%' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '%'
	</select>

	<select id="selectProductionOrderDetailBOM" resultType="map">
		SELECT
			   CASE 
				<foreach collection="list" item="item" separator=" ">
					WHEN b.ITEM_ID = #{item.ITEM_ID} THEN #{item.PRODUCTION_ORDER_DETAIL_ID}
				</foreach> 
			   END AS PRODUCTION_ORDER_DETAIL_ID
			 , bd.COMPONENT_ID AS ITEM_ID
			 , bd.REQUIRED_AMOUNT * 
			   (CASE 
				<foreach collection="list" item="item" index="index" separator=" ">
					WHEN b.ITEM_ID = #{item.ITEM_ID} THEN ${item.AMOUNT}
				</foreach> 
				END) AS AMOUNT
		  FROM BOM b
			   INNER JOIN BOM_DETAIL bd 
					   ON b.BOM_ID = bd.BOM_ID
		 WHERE b.ITEM_ID IN
		<foreach collection="list" item="item" open="(" separator="," close=")">
			#{item.ITEM_ID}
		</foreach>
		 ORDER BY b.BOM_ID, b.ITEM_ID ASC
	</select>
	
	<insert id="insertProductionOrderDetailBOM">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO PUT_MATERIALS(
				  PUT_MATERIALS_ID
				, PRODUCTION_ORDER_DETAIL_ID
				, ITEM_ID
				, AMOUNT
			) VALUES (
				  #{item.PUT_MATERIALS_ID}
				, #{item.PRODUCTION_ORDER_DETAIL_ID}
				, #{item.ITEM_ID}
				, #{item.AMOUNT}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
	<select id="selectMaxPutMaterialsId" resultType="int">
		SELECT NVL(TO_NUMBER(SUBSTR(MAX(PUT_MATERIALS_ID), 3)), 0) + 1 AS MAX_NUMBER 
		  FROM PUT_MATERIALS
	</select>

	<delete id="deleteProductionOrder">
		DELETE FROM PRODUCTION_ORDER
		 WHERE PRODUCTION_ORDER_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="selectProductionOrderDetailDeleteIds">
		SELECT PRODUCTION_ORDER_DETAIL_ID
		  FROM PRODUCTION_ORDER_DETAIL
		 WHERE PRODUCTION_ORDER_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>

	<delete id="deleteProductionOrderDetail">
		DELETE FROM PRODUCTION_ORDER_DETAIL
		 WHERE PRODUCTION_ORDER_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<delete id="deletePutMaterials">
		DELETE FROM PUT_MATERIALS
		 WHERE PRODUCTION_ORDER_DETAIL_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<update id="updateProductionOrderCnt">
		UPDATE PRODUCTION_ORDER 
		   SET ORDER_DETAIL_QUANTITY = (
				SELECT COUNT(*) AS COUNT 
				  FROM PRODUCTION_ORDER_DETAIL pod
				 WHERE PRODUCTION_ORDER_ID = #{PRODUCTION_ORDER_ID}
		   )
		 WHERE PRODUCTION_ORDER_ID = #{PRODUCTION_ORDER_ID}
	</update>
	
	<select id="selectBom" resultType="map">
		SELECT 
			   b.BOM_ID
			 , b.ITEM_ID
			 , i.ITEM_NAME
			 , b.PARENT_ID
			 , b.BOM_QUANTITY
		  FROM BOM b
			   LEFT JOIN ITEM i 
					  ON b.ITEM_ID = i.ITEM_ID
	</select>
	
	<insert id="insertBom">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO BOM (
				  BOM_ID
				, ITEM_ID
				, PARENT_ID
				, BOM_QUANTITY
			)
			VALUES (
				  #{item.BOM_ID}
				, #{item.ITEM_ID, jdbcType=VARCHAR}
				, #{item.PARENT_ID, jdbcType=VARCHAR}
				, 0
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<update id="updateBom">
		<foreach collection="list" item="row" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE BOM
			   SET 
				   BOM_ID = #{row.BOM_ID}
			 	 , ITEM_ID = #{row.ITEM_ID, jdbcType=VARCHAR}
				 , PARENT_ID = #{row.PARENT_ID, jdbcType=VARCHAR}
			 WHERE BOM_ID = #{row.BOM_ID}
		</foreach>
	</update>
	
	<delete id="deleteBom">
		DELETE FROM BOM
		 WHERE BOM_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<delete id="deleteBomDetailById">
		DELETE FROM BOM_DETAIL
		 WHERE BOM_ID IN
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="selectBomDetail" resultType="map">
		SELECT 
			   bd.BOM_DETAIL_ID
			 , bd.COMPONENT_ID
			 , COALESCE(i.ITEM_NAME, m.MATERIAL_NAME) AS COMPONENT_NAME
			 , bd.UNIT
			 , bd.REQUIRED_AMOUNT
			 , bd.BOM_ID
		  FROM BOM_DETAIL bd
			   LEFT JOIN ITEM i 
			 		  ON bd.COMPONENT_ID = i.ITEM_ID
			   LEFT JOIN MATERIAL m 
			 		  ON bd.COMPONENT_ID = m.MATERIAL_ID
		 WHERE
		 	   1 = 1
		<choose>
			<when test='bom_id != null and bom_id != ""'>
				AND BOM_ID = #{bom_id}
			</when>
			<otherwise>
				AND BOM_ID IS NULL
			</otherwise>
		</choose>
	</select>
	
	<insert id="insertBomDetail">
		INSERT ALL
		<foreach collection="list" item="item">
			INTO BOM_DETAIL (
				  BOM_ID
				, COMPONENT_ID
				, UNIT
				, REQUIRED_AMOUNT
			)
			VALUES (
				  #{item.BOM_ID}
				, #{item.COMPONENT_ID}
				, #{item.UNIT}
				, #{item.REQUIRED_AMOUNT}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<update id="updateBomQuantity">
		UPDATE BOM
		   SET BOM_QUANTITY = #{createdRowsCnt}
		 WHERE BOM_ID = #{BOM_ID}
	</update>
	
	<select id="selectBomDetailComponent" resultType="map">
		SELECT 
			   ITEM_ID 			AS COMPONENT_ID
			 , ITEM_NAME 		AS COMPONENT_NAME
			 , ITEM_UNIT 		AS UNIT
			 , 'ITEM' 			AS TYPE
		  FROM ITEM
		 WHERE 
			   1 = 1
		<if test='type != null and type != ""'>
			AND #{type} = 'ITEM'
		</if>
		<if test='searchKeyword != null and searchKeyword != ""'>
			AND (ITEM_ID LIKE '%' || #{searchKeyword} || '%'
				OR ITEM_NAME LIKE '%' || #{searchKeyword} || '%')
		</if>
		 UNION ALL
		SELECT 
			   MATERIAL_ID 		AS COMPONENT_ID
			 , MATERIAL_NAME 	AS COMPONENT_NAME
			 , UNIT 			AS UNIT
			 , 'MATERIAL' 		AS TYPE
		  FROM MATERIAL
		 WHERE 
			   1 = 1
		<if test='type != null and type != ""'>
			AND #{type} = 'MATERIAL'
		</if>
		<if test='searchKeyword != null and searchKeyword != ""'>
			AND (MATERIAL_ID LIKE '%' || #{searchKeyword} || '%'
				OR MATERIAL_NAME LIKE '%' || #{searchKeyword} || '%')
		</if>
	</select>
</mapper>